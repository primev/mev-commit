// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: providerapi/v1/providerapi.proto

package providerapiv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Provider_ReceiveBids_FullMethodName       = "/providerapi.v1.Provider/ReceiveBids"
	Provider_SendProcessedBids_FullMethodName = "/providerapi.v1.Provider/SendProcessedBids"
	Provider_RegisterStake_FullMethodName     = "/providerapi.v1.Provider/RegisterStake"
	Provider_GetStake_FullMethodName          = "/providerapi.v1.Provider/GetStake"
	Provider_GetMinStake_FullMethodName       = "/providerapi.v1.Provider/GetMinStake"
	Provider_GetPendingTxns_FullMethodName    = "/providerapi.v1.Provider/GetPendingTxns"
	Provider_CancelTransaction_FullMethodName = "/providerapi.v1.Provider/CancelTransaction"
)

// ProviderClient is the client API for Provider service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProviderClient interface {
	// ReceiveBids
	//
	// ReceiveBids is called by the provider to receive bids from the mev-commit node.
	// The mev-commit node will stream bids to the provider as the response.
	ReceiveBids(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (Provider_ReceiveBidsClient, error)
	// SendProcessedBids
	//
	// SendProcessedBids is called by the provider to send processed bids to the mev-commit node.
	// The provider will stream processed bids to the mev-commit node.
	SendProcessedBids(ctx context.Context, opts ...grpc.CallOption) (Provider_SendProcessedBidsClient, error)
	// RegisterStake
	//
	// RegisterStake is called by the provider to register its stake in the provider registry.
	RegisterStake(ctx context.Context, in *StakeRequest, opts ...grpc.CallOption) (*StakeResponse, error)
	// GetStake
	//
	// GetStake is called by the provider to get its stake in the provider registry.
	GetStake(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*StakeResponse, error)
	// GetMinStake
	//
	// GetMinStake is called by the provider to get the minimum stake required to be in the provider registry.
	GetMinStake(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*StakeResponse, error)
	// GetPendingTxns
	//
	// GetPendingTxns is called by the provider to get the pending transactions for the wallet.
	GetPendingTxns(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*PendingTxnsResponse, error)
	// CancelTransaction
	//
	// CancelTransaction is called by the provider to cancel a transaction sent from this wallet.
	CancelTransaction(ctx context.Context, in *CancelReq, opts ...grpc.CallOption) (*CancelResponse, error)
}

type providerClient struct {
	cc grpc.ClientConnInterface
}

func NewProviderClient(cc grpc.ClientConnInterface) ProviderClient {
	return &providerClient{cc}
}

func (c *providerClient) ReceiveBids(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (Provider_ReceiveBidsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Provider_ServiceDesc.Streams[0], Provider_ReceiveBids_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &providerReceiveBidsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Provider_ReceiveBidsClient interface {
	Recv() (*Bid, error)
	grpc.ClientStream
}

type providerReceiveBidsClient struct {
	grpc.ClientStream
}

func (x *providerReceiveBidsClient) Recv() (*Bid, error) {
	m := new(Bid)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *providerClient) SendProcessedBids(ctx context.Context, opts ...grpc.CallOption) (Provider_SendProcessedBidsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Provider_ServiceDesc.Streams[1], Provider_SendProcessedBids_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &providerSendProcessedBidsClient{stream}
	return x, nil
}

type Provider_SendProcessedBidsClient interface {
	Send(*BidResponse) error
	CloseAndRecv() (*EmptyMessage, error)
	grpc.ClientStream
}

type providerSendProcessedBidsClient struct {
	grpc.ClientStream
}

func (x *providerSendProcessedBidsClient) Send(m *BidResponse) error {
	return x.ClientStream.SendMsg(m)
}

func (x *providerSendProcessedBidsClient) CloseAndRecv() (*EmptyMessage, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(EmptyMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *providerClient) RegisterStake(ctx context.Context, in *StakeRequest, opts ...grpc.CallOption) (*StakeResponse, error) {
	out := new(StakeResponse)
	err := c.cc.Invoke(ctx, Provider_RegisterStake_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerClient) GetStake(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*StakeResponse, error) {
	out := new(StakeResponse)
	err := c.cc.Invoke(ctx, Provider_GetStake_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerClient) GetMinStake(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*StakeResponse, error) {
	out := new(StakeResponse)
	err := c.cc.Invoke(ctx, Provider_GetMinStake_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerClient) GetPendingTxns(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*PendingTxnsResponse, error) {
	out := new(PendingTxnsResponse)
	err := c.cc.Invoke(ctx, Provider_GetPendingTxns_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerClient) CancelTransaction(ctx context.Context, in *CancelReq, opts ...grpc.CallOption) (*CancelResponse, error) {
	out := new(CancelResponse)
	err := c.cc.Invoke(ctx, Provider_CancelTransaction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProviderServer is the server API for Provider service.
// All implementations must embed UnimplementedProviderServer
// for forward compatibility
type ProviderServer interface {
	// ReceiveBids
	//
	// ReceiveBids is called by the provider to receive bids from the mev-commit node.
	// The mev-commit node will stream bids to the provider as the response.
	ReceiveBids(*EmptyMessage, Provider_ReceiveBidsServer) error
	// SendProcessedBids
	//
	// SendProcessedBids is called by the provider to send processed bids to the mev-commit node.
	// The provider will stream processed bids to the mev-commit node.
	SendProcessedBids(Provider_SendProcessedBidsServer) error
	// RegisterStake
	//
	// RegisterStake is called by the provider to register its stake in the provider registry.
	RegisterStake(context.Context, *StakeRequest) (*StakeResponse, error)
	// GetStake
	//
	// GetStake is called by the provider to get its stake in the provider registry.
	GetStake(context.Context, *EmptyMessage) (*StakeResponse, error)
	// GetMinStake
	//
	// GetMinStake is called by the provider to get the minimum stake required to be in the provider registry.
	GetMinStake(context.Context, *EmptyMessage) (*StakeResponse, error)
	// GetPendingTxns
	//
	// GetPendingTxns is called by the provider to get the pending transactions for the wallet.
	GetPendingTxns(context.Context, *EmptyMessage) (*PendingTxnsResponse, error)
	// CancelTransaction
	//
	// CancelTransaction is called by the provider to cancel a transaction sent from this wallet.
	CancelTransaction(context.Context, *CancelReq) (*CancelResponse, error)
	mustEmbedUnimplementedProviderServer()
}

// UnimplementedProviderServer must be embedded to have forward compatible implementations.
type UnimplementedProviderServer struct {
}

func (UnimplementedProviderServer) ReceiveBids(*EmptyMessage, Provider_ReceiveBidsServer) error {
	return status.Errorf(codes.Unimplemented, "method ReceiveBids not implemented")
}
func (UnimplementedProviderServer) SendProcessedBids(Provider_SendProcessedBidsServer) error {
	return status.Errorf(codes.Unimplemented, "method SendProcessedBids not implemented")
}
func (UnimplementedProviderServer) RegisterStake(context.Context, *StakeRequest) (*StakeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterStake not implemented")
}
func (UnimplementedProviderServer) GetStake(context.Context, *EmptyMessage) (*StakeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStake not implemented")
}
func (UnimplementedProviderServer) GetMinStake(context.Context, *EmptyMessage) (*StakeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMinStake not implemented")
}
func (UnimplementedProviderServer) GetPendingTxns(context.Context, *EmptyMessage) (*PendingTxnsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPendingTxns not implemented")
}
func (UnimplementedProviderServer) CancelTransaction(context.Context, *CancelReq) (*CancelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelTransaction not implemented")
}
func (UnimplementedProviderServer) mustEmbedUnimplementedProviderServer() {}

// UnsafeProviderServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProviderServer will
// result in compilation errors.
type UnsafeProviderServer interface {
	mustEmbedUnimplementedProviderServer()
}

func RegisterProviderServer(s grpc.ServiceRegistrar, srv ProviderServer) {
	s.RegisterService(&Provider_ServiceDesc, srv)
}

func _Provider_ReceiveBids_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EmptyMessage)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ProviderServer).ReceiveBids(m, &providerReceiveBidsServer{stream})
}

type Provider_ReceiveBidsServer interface {
	Send(*Bid) error
	grpc.ServerStream
}

type providerReceiveBidsServer struct {
	grpc.ServerStream
}

func (x *providerReceiveBidsServer) Send(m *Bid) error {
	return x.ServerStream.SendMsg(m)
}

func _Provider_SendProcessedBids_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ProviderServer).SendProcessedBids(&providerSendProcessedBidsServer{stream})
}

type Provider_SendProcessedBidsServer interface {
	SendAndClose(*EmptyMessage) error
	Recv() (*BidResponse, error)
	grpc.ServerStream
}

type providerSendProcessedBidsServer struct {
	grpc.ServerStream
}

func (x *providerSendProcessedBidsServer) SendAndClose(m *EmptyMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *providerSendProcessedBidsServer) Recv() (*BidResponse, error) {
	m := new(BidResponse)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Provider_RegisterStake_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StakeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderServer).RegisterStake(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Provider_RegisterStake_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderServer).RegisterStake(ctx, req.(*StakeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Provider_GetStake_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderServer).GetStake(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Provider_GetStake_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderServer).GetStake(ctx, req.(*EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Provider_GetMinStake_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderServer).GetMinStake(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Provider_GetMinStake_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderServer).GetMinStake(ctx, req.(*EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Provider_GetPendingTxns_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderServer).GetPendingTxns(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Provider_GetPendingTxns_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderServer).GetPendingTxns(ctx, req.(*EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Provider_CancelTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderServer).CancelTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Provider_CancelTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderServer).CancelTransaction(ctx, req.(*CancelReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Provider_ServiceDesc is the grpc.ServiceDesc for Provider service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Provider_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "providerapi.v1.Provider",
	HandlerType: (*ProviderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterStake",
			Handler:    _Provider_RegisterStake_Handler,
		},
		{
			MethodName: "GetStake",
			Handler:    _Provider_GetStake_Handler,
		},
		{
			MethodName: "GetMinStake",
			Handler:    _Provider_GetMinStake_Handler,
		},
		{
			MethodName: "GetPendingTxns",
			Handler:    _Provider_GetPendingTxns_Handler,
		},
		{
			MethodName: "CancelTransaction",
			Handler:    _Provider_CancelTransaction_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ReceiveBids",
			Handler:       _Provider_ReceiveBids_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SendProcessedBids",
			Handler:       _Provider_SendProcessedBids_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "providerapi/v1/providerapi.proto",
}
