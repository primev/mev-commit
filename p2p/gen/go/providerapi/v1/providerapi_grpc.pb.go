// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: providerapi/v1/providerapi.proto

package providerapiv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Provider_ReceiveBids_FullMethodName            = "/providerapi.v1.Provider/ReceiveBids"
	Provider_SendProcessedBids_FullMethodName      = "/providerapi.v1.Provider/SendProcessedBids"
	Provider_Stake_FullMethodName                  = "/providerapi.v1.Provider/Stake"
	Provider_GetStake_FullMethodName               = "/providerapi.v1.Provider/GetStake"
	Provider_GetMinStake_FullMethodName            = "/providerapi.v1.Provider/GetMinStake"
	Provider_WithdrawStake_FullMethodName          = "/providerapi.v1.Provider/WithdrawStake"
	Provider_Unstake_FullMethodName                = "/providerapi.v1.Provider/Unstake"
	Provider_GetProviderReward_FullMethodName      = "/providerapi.v1.Provider/GetProviderReward"
	Provider_WithdrawProviderReward_FullMethodName = "/providerapi.v1.Provider/WithdrawProviderReward"
	Provider_GetCommitmentInfo_FullMethodName      = "/providerapi.v1.Provider/GetCommitmentInfo"
)

// ProviderClient is the client API for Provider service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProviderClient interface {
	// ReceiveBids
	//
	// ReceiveBids is called by the provider to receive bids from the mev-commit node.
	// The mev-commit node will stream bids to the provider as the response. The bid can optionally
	// have the raw transaction payload in it. The order of the transaction hashes will be the same
	// as the raw transaction payloads if included.
	ReceiveBids(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Bid], error)
	// SendProcessedBids
	//
	// SendProcessedBids is called by the provider to send processed bids to the mev-commit node.
	// The provider will stream processed bids to the mev-commit node.
	SendProcessedBids(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[BidResponse, EmptyMessage], error)
	// Stake
	//
	// Stake is called by the provider to register or add to its stake in the provider registry.
	Stake(ctx context.Context, in *StakeRequest, opts ...grpc.CallOption) (*StakeResponse, error)
	// GetStake
	//
	// GetStake is called by the provider to get its stake in the provider registry.
	GetStake(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*StakeResponse, error)
	// GetMinStake
	//
	// GetMinStake is called by the provider to get the minimum stake required to be in the provider registry.
	GetMinStake(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*StakeResponse, error)
	// WithdrawStake
	//
	// WithdrawStake is called by the provider to withdraw its stake from the provider registry.
	WithdrawStake(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*WithdrawalResponse, error)
	// Unstake
	//
	// Unstake is called by the provider to request a unstake from the provider registry.
	Unstake(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*EmptyMessage, error)
	// GetProviderReward
	//
	// GetProviderReward is called by the provider to retrieve their current reward balance
	// without withdrawing it from the bidder registry.
	GetProviderReward(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*RewardResponse, error)
	// WithdrawProviderReward
	//
	// WithdrawProviderReward is called by the provider to withdraw their accumulated rewards
	// from the bidder registry contract.
	WithdrawProviderReward(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*WithdrawalResponse, error)
	// GetCommitmentInfo
	//
	// GetCommitmentInfo is called by the provider to retrieve the commitment information.
	GetCommitmentInfo(ctx context.Context, in *GetCommitmentInfoRequest, opts ...grpc.CallOption) (*CommitmentInfoResponse, error)
}

type providerClient struct {
	cc grpc.ClientConnInterface
}

func NewProviderClient(cc grpc.ClientConnInterface) ProviderClient {
	return &providerClient{cc}
}

func (c *providerClient) ReceiveBids(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Bid], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Provider_ServiceDesc.Streams[0], Provider_ReceiveBids_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[EmptyMessage, Bid]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Provider_ReceiveBidsClient = grpc.ServerStreamingClient[Bid]

func (c *providerClient) SendProcessedBids(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[BidResponse, EmptyMessage], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Provider_ServiceDesc.Streams[1], Provider_SendProcessedBids_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[BidResponse, EmptyMessage]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Provider_SendProcessedBidsClient = grpc.ClientStreamingClient[BidResponse, EmptyMessage]

func (c *providerClient) Stake(ctx context.Context, in *StakeRequest, opts ...grpc.CallOption) (*StakeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StakeResponse)
	err := c.cc.Invoke(ctx, Provider_Stake_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerClient) GetStake(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*StakeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StakeResponse)
	err := c.cc.Invoke(ctx, Provider_GetStake_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerClient) GetMinStake(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*StakeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StakeResponse)
	err := c.cc.Invoke(ctx, Provider_GetMinStake_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerClient) WithdrawStake(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*WithdrawalResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WithdrawalResponse)
	err := c.cc.Invoke(ctx, Provider_WithdrawStake_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerClient) Unstake(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*EmptyMessage, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EmptyMessage)
	err := c.cc.Invoke(ctx, Provider_Unstake_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerClient) GetProviderReward(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*RewardResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RewardResponse)
	err := c.cc.Invoke(ctx, Provider_GetProviderReward_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerClient) WithdrawProviderReward(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*WithdrawalResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WithdrawalResponse)
	err := c.cc.Invoke(ctx, Provider_WithdrawProviderReward_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerClient) GetCommitmentInfo(ctx context.Context, in *GetCommitmentInfoRequest, opts ...grpc.CallOption) (*CommitmentInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommitmentInfoResponse)
	err := c.cc.Invoke(ctx, Provider_GetCommitmentInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProviderServer is the server API for Provider service.
// All implementations must embed UnimplementedProviderServer
// for forward compatibility.
type ProviderServer interface {
	// ReceiveBids
	//
	// ReceiveBids is called by the provider to receive bids from the mev-commit node.
	// The mev-commit node will stream bids to the provider as the response. The bid can optionally
	// have the raw transaction payload in it. The order of the transaction hashes will be the same
	// as the raw transaction payloads if included.
	ReceiveBids(*EmptyMessage, grpc.ServerStreamingServer[Bid]) error
	// SendProcessedBids
	//
	// SendProcessedBids is called by the provider to send processed bids to the mev-commit node.
	// The provider will stream processed bids to the mev-commit node.
	SendProcessedBids(grpc.ClientStreamingServer[BidResponse, EmptyMessage]) error
	// Stake
	//
	// Stake is called by the provider to register or add to its stake in the provider registry.
	Stake(context.Context, *StakeRequest) (*StakeResponse, error)
	// GetStake
	//
	// GetStake is called by the provider to get its stake in the provider registry.
	GetStake(context.Context, *EmptyMessage) (*StakeResponse, error)
	// GetMinStake
	//
	// GetMinStake is called by the provider to get the minimum stake required to be in the provider registry.
	GetMinStake(context.Context, *EmptyMessage) (*StakeResponse, error)
	// WithdrawStake
	//
	// WithdrawStake is called by the provider to withdraw its stake from the provider registry.
	WithdrawStake(context.Context, *EmptyMessage) (*WithdrawalResponse, error)
	// Unstake
	//
	// Unstake is called by the provider to request a unstake from the provider registry.
	Unstake(context.Context, *EmptyMessage) (*EmptyMessage, error)
	// GetProviderReward
	//
	// GetProviderReward is called by the provider to retrieve their current reward balance
	// without withdrawing it from the bidder registry.
	GetProviderReward(context.Context, *EmptyMessage) (*RewardResponse, error)
	// WithdrawProviderReward
	//
	// WithdrawProviderReward is called by the provider to withdraw their accumulated rewards
	// from the bidder registry contract.
	WithdrawProviderReward(context.Context, *EmptyMessage) (*WithdrawalResponse, error)
	// GetCommitmentInfo
	//
	// GetCommitmentInfo is called by the provider to retrieve the commitment information.
	GetCommitmentInfo(context.Context, *GetCommitmentInfoRequest) (*CommitmentInfoResponse, error)
	mustEmbedUnimplementedProviderServer()
}

// UnimplementedProviderServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedProviderServer struct{}

func (UnimplementedProviderServer) ReceiveBids(*EmptyMessage, grpc.ServerStreamingServer[Bid]) error {
	return status.Errorf(codes.Unimplemented, "method ReceiveBids not implemented")
}
func (UnimplementedProviderServer) SendProcessedBids(grpc.ClientStreamingServer[BidResponse, EmptyMessage]) error {
	return status.Errorf(codes.Unimplemented, "method SendProcessedBids not implemented")
}
func (UnimplementedProviderServer) Stake(context.Context, *StakeRequest) (*StakeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stake not implemented")
}
func (UnimplementedProviderServer) GetStake(context.Context, *EmptyMessage) (*StakeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStake not implemented")
}
func (UnimplementedProviderServer) GetMinStake(context.Context, *EmptyMessage) (*StakeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMinStake not implemented")
}
func (UnimplementedProviderServer) WithdrawStake(context.Context, *EmptyMessage) (*WithdrawalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WithdrawStake not implemented")
}
func (UnimplementedProviderServer) Unstake(context.Context, *EmptyMessage) (*EmptyMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unstake not implemented")
}
func (UnimplementedProviderServer) GetProviderReward(context.Context, *EmptyMessage) (*RewardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProviderReward not implemented")
}
func (UnimplementedProviderServer) WithdrawProviderReward(context.Context, *EmptyMessage) (*WithdrawalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WithdrawProviderReward not implemented")
}
func (UnimplementedProviderServer) GetCommitmentInfo(context.Context, *GetCommitmentInfoRequest) (*CommitmentInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCommitmentInfo not implemented")
}
func (UnimplementedProviderServer) mustEmbedUnimplementedProviderServer() {}
func (UnimplementedProviderServer) testEmbeddedByValue()                  {}

// UnsafeProviderServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProviderServer will
// result in compilation errors.
type UnsafeProviderServer interface {
	mustEmbedUnimplementedProviderServer()
}

func RegisterProviderServer(s grpc.ServiceRegistrar, srv ProviderServer) {
	// If the following call pancis, it indicates UnimplementedProviderServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Provider_ServiceDesc, srv)
}

func _Provider_ReceiveBids_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EmptyMessage)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ProviderServer).ReceiveBids(m, &grpc.GenericServerStream[EmptyMessage, Bid]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Provider_ReceiveBidsServer = grpc.ServerStreamingServer[Bid]

func _Provider_SendProcessedBids_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ProviderServer).SendProcessedBids(&grpc.GenericServerStream[BidResponse, EmptyMessage]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Provider_SendProcessedBidsServer = grpc.ClientStreamingServer[BidResponse, EmptyMessage]

func _Provider_Stake_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StakeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderServer).Stake(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Provider_Stake_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderServer).Stake(ctx, req.(*StakeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Provider_GetStake_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderServer).GetStake(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Provider_GetStake_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderServer).GetStake(ctx, req.(*EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Provider_GetMinStake_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderServer).GetMinStake(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Provider_GetMinStake_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderServer).GetMinStake(ctx, req.(*EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Provider_WithdrawStake_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderServer).WithdrawStake(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Provider_WithdrawStake_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderServer).WithdrawStake(ctx, req.(*EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Provider_Unstake_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderServer).Unstake(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Provider_Unstake_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderServer).Unstake(ctx, req.(*EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Provider_GetProviderReward_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderServer).GetProviderReward(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Provider_GetProviderReward_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderServer).GetProviderReward(ctx, req.(*EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Provider_WithdrawProviderReward_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderServer).WithdrawProviderReward(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Provider_WithdrawProviderReward_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderServer).WithdrawProviderReward(ctx, req.(*EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Provider_GetCommitmentInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCommitmentInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderServer).GetCommitmentInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Provider_GetCommitmentInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderServer).GetCommitmentInfo(ctx, req.(*GetCommitmentInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Provider_ServiceDesc is the grpc.ServiceDesc for Provider service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Provider_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "providerapi.v1.Provider",
	HandlerType: (*ProviderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Stake",
			Handler:    _Provider_Stake_Handler,
		},
		{
			MethodName: "GetStake",
			Handler:    _Provider_GetStake_Handler,
		},
		{
			MethodName: "GetMinStake",
			Handler:    _Provider_GetMinStake_Handler,
		},
		{
			MethodName: "WithdrawStake",
			Handler:    _Provider_WithdrawStake_Handler,
		},
		{
			MethodName: "Unstake",
			Handler:    _Provider_Unstake_Handler,
		},
		{
			MethodName: "GetProviderReward",
			Handler:    _Provider_GetProviderReward_Handler,
		},
		{
			MethodName: "WithdrawProviderReward",
			Handler:    _Provider_WithdrawProviderReward_Handler,
		},
		{
			MethodName: "GetCommitmentInfo",
			Handler:    _Provider_GetCommitmentInfo_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ReceiveBids",
			Handler:       _Provider_ReceiveBids_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SendProcessedBids",
			Handler:       _Provider_SendProcessedBids_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "providerapi/v1/providerapi.proto",
}
