// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: bidderapi/v1/bidderapi.proto

package bidderapiv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Bidder_SendBid_FullMethodName            = "/bidderapi.v1.Bidder/SendBid"
	Bidder_Deposit_FullMethodName            = "/bidderapi.v1.Bidder/Deposit"
	Bidder_RequestWithdrawals_FullMethodName = "/bidderapi.v1.Bidder/RequestWithdrawals"
	Bidder_GetDeposit_FullMethodName         = "/bidderapi.v1.Bidder/GetDeposit"
	Bidder_Withdraw_FullMethodName           = "/bidderapi.v1.Bidder/Withdraw"
	Bidder_GetBidInfo_FullMethodName         = "/bidderapi.v1.Bidder/GetBidInfo"
	Bidder_ClaimSlashedFunds_FullMethodName  = "/bidderapi.v1.Bidder/ClaimSlashedFunds"
)

// BidderClient is the client API for Bidder service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BidderClient interface {
	// SendBid
	//
	// Send a bid to the bidder mev-commit node. The bid is a message from the bidder to the provider
	// with the transaction hashes and the amount of ETH that the bidder is willing to pay to the provider
	// for including the transaction in the block. The bid also includes the block number that the bidder
	// wants to include the transaction in, the start and end timestamps for the bid decay. The bidder can
	// optionally include the raw transaction payloads (hex encoded RLP) instead of transaction hashes.
	SendBid(ctx context.Context, in *Bid, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Commitment], error)
	// Deposit
	//
	// Deposit is called by the bidder node to add deposit in the bidder registry, specific to a provider.
	Deposit(ctx context.Context, in *DepositRequest, opts ...grpc.CallOption) (*DepositResponse, error)
	// RequestWithdrawals
	//
	// RequestWithdrawals is called by the bidder node to request withdrawals from provider(s)
	RequestWithdrawals(ctx context.Context, in *RequestWithdrawalsRequest, opts ...grpc.CallOption) (*RequestWithdrawalsResponse, error)
	// GetDeposit
	//
	// GetDeposit is called by the bidder to get its deposit specific to a provider in the bidder registry.
	GetDeposit(ctx context.Context, in *GetDepositRequest, opts ...grpc.CallOption) (*DepositResponse, error)
	// Withdraw
	//
	// Withdraw is called by the bidder to withdraw their deposit to a provider.
	Withdraw(ctx context.Context, in *WithdrawRequest, opts ...grpc.CallOption) (*WithdrawResponse, error)
	// GetBidInfo
	//
	// GetBidInfo is called by the bidder to get the bid information. If block number is not specified,
	// all known block numbers are returned in the ascending order.
	GetBidInfo(ctx context.Context, in *GetBidInfoRequest, opts ...grpc.CallOption) (*GetBidInfoResponse, error)
	// ClaimSlashedFunds
	//
	// ClaimSlashedFunds is called by the bidder to claim slashed funds from the provider. The response
	// will show the amount claimed if any in wei.
	ClaimSlashedFunds(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*wrapperspb.StringValue, error)
}

type bidderClient struct {
	cc grpc.ClientConnInterface
}

func NewBidderClient(cc grpc.ClientConnInterface) BidderClient {
	return &bidderClient{cc}
}

func (c *bidderClient) SendBid(ctx context.Context, in *Bid, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Commitment], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Bidder_ServiceDesc.Streams[0], Bidder_SendBid_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[Bid, Commitment]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Bidder_SendBidClient = grpc.ServerStreamingClient[Commitment]

func (c *bidderClient) Deposit(ctx context.Context, in *DepositRequest, opts ...grpc.CallOption) (*DepositResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DepositResponse)
	err := c.cc.Invoke(ctx, Bidder_Deposit_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bidderClient) RequestWithdrawals(ctx context.Context, in *RequestWithdrawalsRequest, opts ...grpc.CallOption) (*RequestWithdrawalsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RequestWithdrawalsResponse)
	err := c.cc.Invoke(ctx, Bidder_RequestWithdrawals_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bidderClient) GetDeposit(ctx context.Context, in *GetDepositRequest, opts ...grpc.CallOption) (*DepositResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DepositResponse)
	err := c.cc.Invoke(ctx, Bidder_GetDeposit_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bidderClient) Withdraw(ctx context.Context, in *WithdrawRequest, opts ...grpc.CallOption) (*WithdrawResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WithdrawResponse)
	err := c.cc.Invoke(ctx, Bidder_Withdraw_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bidderClient) GetBidInfo(ctx context.Context, in *GetBidInfoRequest, opts ...grpc.CallOption) (*GetBidInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBidInfoResponse)
	err := c.cc.Invoke(ctx, Bidder_GetBidInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bidderClient) ClaimSlashedFunds(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*wrapperspb.StringValue, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(wrapperspb.StringValue)
	err := c.cc.Invoke(ctx, Bidder_ClaimSlashedFunds_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BidderServer is the server API for Bidder service.
// All implementations must embed UnimplementedBidderServer
// for forward compatibility.
type BidderServer interface {
	// SendBid
	//
	// Send a bid to the bidder mev-commit node. The bid is a message from the bidder to the provider
	// with the transaction hashes and the amount of ETH that the bidder is willing to pay to the provider
	// for including the transaction in the block. The bid also includes the block number that the bidder
	// wants to include the transaction in, the start and end timestamps for the bid decay. The bidder can
	// optionally include the raw transaction payloads (hex encoded RLP) instead of transaction hashes.
	SendBid(*Bid, grpc.ServerStreamingServer[Commitment]) error
	// Deposit
	//
	// Deposit is called by the bidder node to add deposit in the bidder registry, specific to a provider.
	Deposit(context.Context, *DepositRequest) (*DepositResponse, error)
	// RequestWithdrawals
	//
	// RequestWithdrawals is called by the bidder node to request withdrawals from provider(s)
	RequestWithdrawals(context.Context, *RequestWithdrawalsRequest) (*RequestWithdrawalsResponse, error)
	// GetDeposit
	//
	// GetDeposit is called by the bidder to get its deposit specific to a provider in the bidder registry.
	GetDeposit(context.Context, *GetDepositRequest) (*DepositResponse, error)
	// Withdraw
	//
	// Withdraw is called by the bidder to withdraw their deposit to a provider.
	Withdraw(context.Context, *WithdrawRequest) (*WithdrawResponse, error)
	// GetBidInfo
	//
	// GetBidInfo is called by the bidder to get the bid information. If block number is not specified,
	// all known block numbers are returned in the ascending order.
	GetBidInfo(context.Context, *GetBidInfoRequest) (*GetBidInfoResponse, error)
	// ClaimSlashedFunds
	//
	// ClaimSlashedFunds is called by the bidder to claim slashed funds from the provider. The response
	// will show the amount claimed if any in wei.
	ClaimSlashedFunds(context.Context, *EmptyMessage) (*wrapperspb.StringValue, error)
	mustEmbedUnimplementedBidderServer()
}

// UnimplementedBidderServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBidderServer struct{}

func (UnimplementedBidderServer) SendBid(*Bid, grpc.ServerStreamingServer[Commitment]) error {
	return status.Errorf(codes.Unimplemented, "method SendBid not implemented")
}
func (UnimplementedBidderServer) Deposit(context.Context, *DepositRequest) (*DepositResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Deposit not implemented")
}
func (UnimplementedBidderServer) RequestWithdrawals(context.Context, *RequestWithdrawalsRequest) (*RequestWithdrawalsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestWithdrawals not implemented")
}
func (UnimplementedBidderServer) GetDeposit(context.Context, *GetDepositRequest) (*DepositResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeposit not implemented")
}
func (UnimplementedBidderServer) Withdraw(context.Context, *WithdrawRequest) (*WithdrawResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Withdraw not implemented")
}
func (UnimplementedBidderServer) GetBidInfo(context.Context, *GetBidInfoRequest) (*GetBidInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBidInfo not implemented")
}
func (UnimplementedBidderServer) ClaimSlashedFunds(context.Context, *EmptyMessage) (*wrapperspb.StringValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClaimSlashedFunds not implemented")
}
func (UnimplementedBidderServer) mustEmbedUnimplementedBidderServer() {}
func (UnimplementedBidderServer) testEmbeddedByValue()                {}

// UnsafeBidderServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BidderServer will
// result in compilation errors.
type UnsafeBidderServer interface {
	mustEmbedUnimplementedBidderServer()
}

func RegisterBidderServer(s grpc.ServiceRegistrar, srv BidderServer) {
	// If the following call pancis, it indicates UnimplementedBidderServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Bidder_ServiceDesc, srv)
}

func _Bidder_SendBid_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Bid)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BidderServer).SendBid(m, &grpc.GenericServerStream[Bid, Commitment]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Bidder_SendBidServer = grpc.ServerStreamingServer[Commitment]

func _Bidder_Deposit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DepositRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BidderServer).Deposit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Bidder_Deposit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BidderServer).Deposit(ctx, req.(*DepositRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bidder_RequestWithdrawals_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestWithdrawalsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BidderServer).RequestWithdrawals(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Bidder_RequestWithdrawals_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BidderServer).RequestWithdrawals(ctx, req.(*RequestWithdrawalsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bidder_GetDeposit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDepositRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BidderServer).GetDeposit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Bidder_GetDeposit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BidderServer).GetDeposit(ctx, req.(*GetDepositRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bidder_Withdraw_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithdrawRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BidderServer).Withdraw(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Bidder_Withdraw_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BidderServer).Withdraw(ctx, req.(*WithdrawRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bidder_GetBidInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBidInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BidderServer).GetBidInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Bidder_GetBidInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BidderServer).GetBidInfo(ctx, req.(*GetBidInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bidder_ClaimSlashedFunds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BidderServer).ClaimSlashedFunds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Bidder_ClaimSlashedFunds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BidderServer).ClaimSlashedFunds(ctx, req.(*EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

// Bidder_ServiceDesc is the grpc.ServiceDesc for Bidder service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Bidder_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bidderapi.v1.Bidder",
	HandlerType: (*BidderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Deposit",
			Handler:    _Bidder_Deposit_Handler,
		},
		{
			MethodName: "RequestWithdrawals",
			Handler:    _Bidder_RequestWithdrawals_Handler,
		},
		{
			MethodName: "GetDeposit",
			Handler:    _Bidder_GetDeposit_Handler,
		},
		{
			MethodName: "Withdraw",
			Handler:    _Bidder_Withdraw_Handler,
		},
		{
			MethodName: "GetBidInfo",
			Handler:    _Bidder_GetBidInfo_Handler,
		},
		{
			MethodName: "ClaimSlashedFunds",
			Handler:    _Bidder_ClaimSlashedFunds_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendBid",
			Handler:       _Bidder_SendBid_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "bidderapi/v1/bidderapi.proto",
}
