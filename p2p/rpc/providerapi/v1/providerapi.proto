syntax = "proto3";

package providerapi.v1;

import "protoc-gen-openapiv2/options/annotations.proto";
import "google/api/annotations.proto";
import "buf/validate/validate.proto";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    title: "Provider API";
    version: "1.0.0-alpha";
    license: {
      name: "Business Source License 1.1";
      url: "https://github.com/primev/mev-commit/blob/main/LICENSE";
    };
  };
};

service Provider {
  // ReceiveBids
  //
  // ReceiveBids is called by the provider to receive bids from the mev-commit node.
  // The mev-commit node will stream bids to the provider as the response.
  rpc ReceiveBids(EmptyMessage) returns (stream Bid) {
    option (google.api.http) = {get: "/v1/provider/receive_bids"};
  }
  // SendProcessedBids
  //
  // SendProcessedBids is called by the provider to send processed bids to the mev-commit node.
  // The provider will stream processed bids to the mev-commit node.
  rpc SendProcessedBids(stream BidResponse) returns (EmptyMessage) {
    option (google.api.http) = {
      post: "/v1/provider/send_processed_bids"
      body: "*"
    };
  }
  // RegisterStake
  //
  // RegisterStake is called by the provider to register its stake in the provider registry.
  rpc RegisterStake(StakeRequest) returns (StakeResponse) {
    option (google.api.http) = {post: "/v1/provider/register_stake/{amount}"};
  }
  // GetStake
  //
  // GetStake is called by the provider to get its stake in the provider registry.
  rpc GetStake(EmptyMessage) returns (StakeResponse) {
    option (google.api.http) = {get: "/v1/provider/get_stake"};
  }
  // GetMinStake
  //
  // GetMinStake is called by the provider to get the minimum stake required to be in the provider registry.
  rpc GetMinStake(EmptyMessage) returns (StakeResponse) {
    option (google.api.http) = {get: "/v1/provider/get_min_stake"};
  }
  // WithdrawStake
  //
  // WithdrawStake is called by the provider to withdraw its stake from the provider registry.
  rpc WithdrawStake(EmptyMessage) returns (WithdrawalResponse) {
    option (google.api.http) = {post: "/v1/provider/withdraw_stake"};
  }
  // Unstake
  //
  // Unstake is called by the provider to request a unstake from the provider registry.
  rpc Unstake(EmptyMessage) returns (EmptyMessage) {
    option (google.api.http) = {post: "/v1/provider/unstake"};
  }
}

message StakeRequest {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      title: "Stake request"
      description: "Stake provider in the provider registry."
      required: ["amount", "bls_public_key"]
    }
    example: "{\"amount\": \"1000000000000000000\", \"bls_public_key\": \"80000cddeec66a800e00b0ccbb62f12298073603f5209e812abbac7e870482e488dd1bbe533a9d44497ba8b756e1e82b\"}"
  };
  string amount = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "Amount of ETH to stake in the provider registry."
    pattern: "[0-9]+"
  }, (buf.validate.field).cel = {
      id: "amount",
      message: "amount must be a valid integer.",
      expression: "this.matches('^[0-9]+$') && uint(this) > 0"
  }];
  string bls_public_key = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "BLS public key of the provider."
    pattern: "^(0x)?[a-fA-F0-9]{96}$"
  }, (buf.validate.field).cel = {
      id: "bls_public_key",
      message: "bls_public_key must be a valid 48-byte hex string, with optional 0x prefix.",
      expression: "this.matches('^(0x)?[a-fA-F0-9]{96}$')"
  }];
};

message StakeResponse {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      title: "Stake response"
      description: "Get staked amount for provider in the provider registry."
    }
    example: "{\"amount\": \"1000000000000000000\", \"bls_public_key\": \"80000cddeec66a80e00b0ccbb62f12298073603f5209e812abbac7e870482e488dd1bbe533a9d4497ba8b756e1e82b\"}"
  };
  string amount = 1;
  string bls_public_key = 2;
};

message WithdrawalResponse {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      title: "Withdrawal response"
      description: "Withdrawal amount for provider in the provider registry."
    }
    example: "{\"amount\": \"1000000000000000000\"}"
  };
  string amount = 1;
};

message EmptyMessage {};

message Bid {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      title: "Bid message"
      description: "Signed bid message from bidders to the provider."
      required: ["txHashes", "bidAmount", "blockNumber", "bidDigest"]
    }
    example: "{\"txHashes\": [\"fe4cb47db3630551beedfbd02a71ecc69fd59758e2ba699606e2d5c74284ffa7\", \"71c1348f2d7ff7e814f9c3617983703435ea7446de420aeac488bf1de35737e8\"], \"amount\": \"1000000000000000000\", \"blockNumber\": 123456, \"bidDigest\": \"9dJinwL+FZ6B1xsIQQo8t8B0ZXJubJwY86l/Yu7yAH159QrPHU0qj2P+YFj+llbuI1ZygdxGsX8+P3byMEA5ig==\"}"
  };
  repeated string tx_hashes = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "Hex string encoding of the hashes of the transactions that the bidder wants to include in the block."
    pattern: "[a-fA-F0-9]{64}"
  }, (buf.validate.field).cel = {
      id: "tx_hashes",
      message: "tx_hashes must be a valid array of transaction hashes.",
      expression: "this.all(r, r.matches('^[a-fA-F0-9]{64}$'))"
  }];
  string bid_amount = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "Amount of ETH that the bidder is willing to pay to the provider for including the transaction in the block."
    pattern: "[0-9]+"
  }, (buf.validate.field).cel = {
      id: "bid_amount",
      message: "bid_amount must be a valid integer.",
      expression: "this.matches('^[0-9]+$') && uint(this) > 0"
  }];
  int64 block_number = 3 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "Max block number that the bidder wants to include the transaction in."
  }, (buf.validate.field).int64.gt = 0];
  bytes bid_digest = 4 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "Digest of the bid message signed by the bidder."
  }, (buf.validate.field).bytes = {
      min_len: 1,
      max_len: 64
  }];
  int64 decay_start_timestamp = 5 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "Timestamp at which the bid starts decaying."
  }, (buf.validate.field).cel = {
      id: "decay_start_timestamp",
      message: "decay_start_timestamp must be a valid integer.",
      expression: "uint(this) > 0"
  }];
  int64 decay_end_timestamp = 6 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "Timestamp at which the bid ends decaying."
  }, (buf.validate.field).cel = {
      id: "decay_end_timestamp",
      message: "decay_end_timestamp must be a valid integer.",
      expression: "uint(this) > 0"
  }];
  repeated string reverting_tx_hashes = 7 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "Optional array of tx hashes that are allowed to revert or be discarded."
  }, (buf.validate.field).cel = {
      id: "reverting_tx_hashes",
      message: "reverting_tx_hashes must be an array of valid transaction hashes.",
      expression: "this.all(r, r.matches('^[a-fA-F0-9]{64}$'))"
  }];
  repeated string raw_transactions = 8 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "Optional array of raw transactions that the bidder wants to include in the block."
  }, (buf.validate.field).cel = {
      id: "raw_transactions",
      message: "raw_transactions must be an array of valid raw transactions.",
      expression: "this.all(r, r.matches('^[a-fA-F0-9]+$'))"
  }];
};

message BidResponse {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      title: "Bid response"
      description: "Response sent by the provider with the decision on the bid received."
      required: ["bidDigest", "status", "decayDispatchTimestamp"]
    }
    example: "{\"bidDigest\": \"9dJinwL+FZ6B1xsIQQo8t8B0ZXJubJwY86l/Yu7yAH159QrPHU0qj2P+YFj+llbuI1ZygdxGsX8+P3byMEA5ig==\", \"status\": \"STATUS_ACCEPTED\", \"decayDispatchTimestamp\": 1234567890}"
  };
  bytes bid_digest = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "Digest of the bid message signed by the bidder."
  }];
  enum Status {
    STATUS_UNSPECIFIED = 0;
    STATUS_ACCEPTED = 1;
    STATUS_REJECTED = 2;
  }
  Status status = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "Status of the bid."
  }, (buf.validate.field).enum = {
      defined_only: true,
      in: [
        1,
        2
      ]
  }];
  int64 dispatch_timestamp = 3 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "Timestamp at which the commitment is accepted by provider and is used to compute the expected revenue from the preconfirmation"
  }];
};
