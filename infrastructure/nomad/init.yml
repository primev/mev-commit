- name: Initialize and Configure Cluster
  hosts: all
  become: yes
  remote_user: ubuntu
  gather_facts: yes

  vars:
    env: "devnet"
    nomad_server_ip: "{{ (hostvars[groups['nomad_servers'][0]]['ansible_default_ipv4']['address'] if groups['nomad_servers'] | default([]) | length > 0 else '127.0.0.1') }}"
    nomad_clients_defined: "{{ groups['nomad_clients'] | length > 0 }}"
    nomad_servers_defined: "{{ groups['nomad_servers'] | length > 0 }}"
    vault_init_file: "~/.vault_init.json"
    vault_address: "https://127.0.0.1:8200"
    vault_kv_engine_path: "secret"
    vault_secret_path: "mev-commit"
    openssl_dir: "/etc/ssl"
    ca_certificates_dir: "/usr/local/share/ca-certificates"
    server_common_name: "mev-commit-{{ env }}.mev-commit.primev.xyz"
    ca_certificate_subject: "/C=US/ST=Delaware/L=Delaware City/O=Primev Inc/OU=Certificate Authority/CN={{ ansible_default_ipv4['address'] }}"
    server_csr_subject_alt_name: "DNS:localhost,IP:127.0.0.1,IP:{{ ansible_default_ipv4['address'] }}"

  pre_tasks:
    - name: Dependency | Install common utility packages and dependencies
      ansible.builtin.apt:
        name:
          - tree
          - unzip
          - apt-transport-https
          - curl
          - gnupg
          - iptables
          - jq
          - git
          - python3
          - python3-pip
          - python3-hvac
          - python3-boto3
          - python3-botocore
          - python3-cryptography
        state: present
        update_cache: yes

    - name: Dependency | Install Linux crisis management tools
      ansible.builtin.apt:
        name:
          - procps
          - util-linux
          - sysstat
          - iproute2
          - numactl
          - tcpdump
          - linux-tools-common
          - bpfcc-tools
          - bpftrace
          - trace-cmd
          - nicstat
          - ethtool
          - tiptop
          - cpuid
          - msr-tools
        state: present
      ignore_errors: yes

    - name: Check | env variable
      ansible.builtin.assert:
        that:
          - env is defined and env != ''
        fail_msg: "The 'env' variable is not set."
        success_msg: "The 'env' variable is set to: {{ env }}."

    - name: Check | Operating system
      assert:
        that:
          - ansible_facts['os_family'] == "Debian"
        fail_msg: "This playbook only supports Debian systems."
        success_msg: "Operating system is supported."

    - name: Configuration | Determine the architecture of the target system
      ansible.builtin.set_fact:
        system_arch: "{{ 'arm64' if ansible_architecture == 'aarch64' else 'amd64' }}"

    - name: Check | Load AWS caller information
      amazon.aws.aws_caller_info:
      register: aws_caller_info
      delegate_to: localhost
      become: true
      become_user: "{{ lookup('env', 'USER') }}"

    - name: Check | Validate AWS caller information
      ansible.builtin.assert:
        that:
          - aws_caller_info is defined
          - aws_caller_info.user_id is defined
          - aws_caller_info.user_id | length > 0
        fail_msg: "AWS caller information is invalid or empty."
        success_msg: "AWS caller information is valid."

  tasks:
    - name: Dependency | Add DataDog repository key
      ansible.builtin.apt_key:
        url: "https://keys.datadoghq.com/DATADOG_APT_KEY_CURRENT.public"
        state: present
        keyring: /usr/share/keyrings/datadog-archive-keyring.gpg

    - name: Dependency | Add DataDog repository
      ansible.builtin.apt_repository:
        repo: "deb [signed-by=/usr/share/keyrings/datadog-archive-keyring.gpg] https://apt.datadoghq.com/ stable 7"
        state: present
        filename: datadog.list

    - name: Dependency | Install DataDog Agent
      ansible.builtin.apt:
        name:
          - datadog-agent
          - datadog-signing-keys
        state: present
        update_cache: yes

    - name: Dependency | Import the PostgreSQL repository key
      ansible.builtin.apt_key:
        url: "https://www.postgresql.org/media/keys/ACCC4CF8.asc"
        state: present

    - name: Dependency | Add PostgreSQL repository
      ansible.builtin.apt_repository:
        repo: "deb http://apt.postgresql.org/pub/repos/apt {{ ansible_distribution_release }}-pgdg main"
        state: present
        filename: pgdg.list

    - name: Dependency | Install PostgreSQL
      ansible.builtin.apt:
        name: postgresql-15
        state: present
        update_cache: yes

    - name: System | Stop and disable PostgreSQL service
      ansible.builtin.systemd:
        name: postgresql
        state: stopped
        enabled: no

    - name: Dependency | Add HashiCorp GPG key
      ansible.builtin.apt_key:
        url: https://apt.releases.hashicorp.com/gpg
        keyring: /usr/share/keyrings/hashicorp-archive-keyring.gpg

    - name: Dependency | Add HashiCorp repository
      ansible.builtin.apt_repository:
        repo: "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com {{ ansible_distribution_release }} main"
        filename: hashicorp
        state: present
        update_cache: yes

    - name: Dependency | Install Vault
      ansible.builtin.apt:
        name: vault
        state: present

    - name: Configuration | Deploy Vault configuration file
      ansible.builtin.template:
        src: "templates/system/vault.hcl.j2"
        dest: "/etc/vault.d/vault.hcl"
        owner: vault
        group: vault
        mode: '0644'

    - name: Configuration | Deploy Vault env file
      ansible.builtin.template:
        src: "templates/system/vault.env.j2"
        dest: "/etc/vault.d/vault.env"
        owner: vault
        group: vault
        mode: '0644'

    - name: System | Restart and enable Vault service
      ansible.builtin.systemd:
        name: vault
        state: restarted
        enabled: yes
        daemon_reload: yes

    - name: Configuration | Retrieve Vault status
      ansible.builtin.uri:
        url: "{{ vault_address }}/v1/sys/init"
        method: GET
        return_content: yes
        validate_certs: no
      register: vault_status

    - name: Configuration | Initialize Vault if not already initialized
      ansible.builtin.uri:
        url: "{{ vault_address }}/v1/sys/init"
        method: PUT
        body_format: json
        body: >
          {
            "secret_shares": 1,
            "secret_threshold": 1
          }
        headers:
          Content-Type: "application/json"
        status_code: 200
        return_content: yes
        validate_certs: no
      register: vault_init
      when: vault_status.json.initialized == false

    - name: Configuration | Store Vault unseal key and root token
      ansible.builtin.copy:
        content: "{{ vault_init.json }}"
        dest: "{{ vault_init_file }}"
        mode: '0400'
      when: vault_status.json.initialized == false
      become: true
      become_user: ubuntu

    - name: Configuration | Retrieve Vault seal status
      ansible.builtin.uri:
        url: "{{ vault_address }}/v1/sys/seal-status"
        method: GET
        return_content: yes
        validate_certs: no
      register: vault_seal_status

    - name: Configuration | Fetch Vault initialization file
      slurp:
        src: "{{ vault_init_file }}"
      register: vault_init_content
      when:
        - vault_status.json.initialized == true
        - vault_seal_status.json.sealed == true
      become: true
      become_user: ubuntu

    - name: Configuration | Parse Vault initialization file
      ansible.builtin.set_fact:
        vault_init: "{{ vault_init | combine({'json': (vault_init_content['content'] | b64decode | from_json) }) }}"
      when:
        - vault_init_content is defined
        - vault_status.json.initialized == true
        - vault_seal_status.json.sealed == true

    - name: Configuration | Unseal Vault
      ansible.builtin.uri:
        url: "{{ vault_address }}/v1/sys/unseal"
        method: PUT
        body_format: json
        body: >
          {
            "key": "{{ vault_init.json.keys_base64[0] }}"
          }
        headers:
          Content-Type: "application/json"
          X-Vault-Token: "{{ vault_init.json.root_token }}"
        status_code: 200
        return_content: yes
        validate_certs: no
      register: unseal_result
      until: unseal_result.json.sealed == false
      retries: 5
      delay: 10
      when: vault_seal_status.json.sealed == true

    - name: Configuration | Fetch secrets
      ansible.builtin.set_fact:
        mev_commit_secrets: "{{ lookup('amazon.aws.aws_secret', env ~ '/' ~ vault_secret_path, errors='ignore') }}"
      when: unseal_result.json.sealed == false
      delegate_to: localhost

    - name: Configuration | Enable KV secrets engine
      ansible.builtin.uri:
        url: "{{ vault_address }}/v1/sys/mounts/{{ vault_kv_engine_path }}"
        method: POST
        body_format: json
        body: >
          {
            "type": "kv",
            "options": {
              "version": "2"
            }
          }
        headers:
          X-Vault-Token: "{{ vault_init.json.root_token }}"
        status_code: 204
        validate_certs: no
      when:
        - vault_status.json.initialized == false
        - unseal_result.json.sealed == false

    - name: Configuration | Write the retrieved secret into HashiCorp Vault
      ansible.builtin.uri:
        url: "{{ vault_address }}/v1/{{ vault_kv_engine_path }}/data/{{ vault_secret_path }}"
        method: POST
        body_format: json
        headers:
          X-Vault-Token: "{{ vault_init.json.root_token }}"
          Content-Type: "application/json"
        body: "{{ {'data': mev_commit_secrets} | to_json }}"
        status_code: [200, 204]
        validate_certs: no
      when: unseal_result.json.sealed == false

    - name: Dependency | Install Nomad
      ansible.builtin.apt:
        name: nomad
        state: present

    - name: Dependency | Download CNI plugins package
      ansible.builtin.get_url:
        url: "https://github.com/containernetworking/plugins/releases/download/v1.4.0/cni-plugins-linux-{{ system_arch }}-v1.4.0.tgz"
        dest: "/tmp/cni-plugins.tgz"

    - name: Dependency | Ensure /opt/cni/bin directory exists
      ansible.builtin.file:
        path: "/opt/cni/bin"
        state: directory

    - name: Dependency | Extract the CNI plugins package
      ansible.builtin.unarchive:
        src: "/tmp/cni-plugins.tgz"
        dest: "/opt/cni/bin"
        remote_src: yes
        extra_opts: [--strip-components=1]

    - name: Configuration | Configure bridge network settings
      ansible.builtin.copy:
        dest: "/etc/sysctl.d/bridge.conf"
        content: |
          net.bridge.bridge-nf-call-arptables = 1
          net.bridge.bridge-nf-call-ip6tables = 1
          net.bridge.bridge-nf-call-iptables = 1
        mode: '0644'
      notify:
        - reload sysctl

    - name: Configuration | Deploy Nomad configuration file
      ansible.builtin.template:
        src: "templates/system/nomad.hcl.j2"
        dest: "/etc/nomad.d/nomad.hcl"
        owner: nomad
        group: nomad
        mode: '0644'

    - name: Configuration | Deploy Nomad env file
      ansible.builtin.template:
        src: "templates/system/nomad.env.j2"
        dest: "/etc/nomad.d/nomad.env"
        owner: nomad
        group: nomad
        mode: '0644'
      vars:
        vault_token: "{{ vault_init.json.root_token }}"

    - name: System | Restart and enable Nomad service
      ansible.builtin.systemd:
        name: nomad
        state: restarted
        enabled: yes
        daemon_reload: yes

    - name: Dependency | Install OpenSSL
      ansible.builtin.apt:
        name: openssl
        state: present
        update_cache: yes
      tags:
        - certs

    - name: Configuration | Create directory for OpenSSL
      ansible.builtin.file:
        path: "{{ openssl_dir }}"
        state: directory
        mode: '0755'
      tags:
        - certs

    - name: Configuration | Generate Private Key for CA
      ansible.builtin.openssl_privatekey:
        path: "{{ ca_certificates_dir }}/ca-{{ server_common_name }}.key"
        size: 4096
      tags:
        - certs

    - name: Configuration | Generate Self-Signed CA Certificate
      ansible.builtin.command:
        cmd: "openssl req -x509 -new -nodes -key {{ ca_certificates_dir }}/ca-{{ server_common_name }}.key -days 3650 -out {{ ca_certificates_dir }}/ca-{{ server_common_name }}.crt -subj '{{ ca_certificate_subject }}'"
      notify: update ca-certificates
      tags:
        - certs

    - name: Configuration | Generate Private Key for Server
      ansible.builtin.openssl_privatekey:
        path: "{{ openssl_dir }}/private/{{ server_common_name }}.key"
        size: 4096
      tags:
        - certs

    - name: Configuration | Generate CSR for Server
      ansible.builtin.openssl_csr:
        path: "/tmp/{{ server_common_name }}.csr"
        privatekey_path: "{{ openssl_dir }}/private/{{ server_common_name }}.key"
        common_name: "{{ ansible_default_ipv4['address'] }}"
        subject_alt_name: "{{ server_csr_subject_alt_name }}"
      tags:
        - certs

    - name: Configuration | Generate Server Certificate signed by Self-Signed CA
      ansible.builtin.openssl_certificate:
        path: "{{ openssl_dir }}/certs/{{ server_common_name }}.crt"
        privatekey_path: "{{ openssl_dir }}/private/{{ server_common_name }}.key"
        csr_path: "/tmp/{{ server_common_name }}.csr"
        provider: ownca
        ownca_path: "{{ ca_certificates_dir }}/ca-{{ server_common_name }}.crt"
        ownca_privatekey_path: "{{ ca_certificates_dir }}/ca-{{ server_common_name }}.key"
        ownca_not_before: "-1d"
        ownca_not_after: "+365d"
      tags:
        - certs

  handlers:
    - name: reload sysctl
      ansible.builtin.command:
        cmd: sysctl --system
    - name: update ca-certificates
      ansible.builtin.command:
        cmd: update-ca-certificates