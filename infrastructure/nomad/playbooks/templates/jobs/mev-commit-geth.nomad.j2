#jinja2: trim_blocks:True, lstrip_blocks:True
job "{{ job.name }}" {
  datacenters = ["{{ datacenter }}"]
  type = "service"

  group "{{ job.name }}-group" {
    count = {{ job.count }}

    {% if env == 'devenv' %}
    restart {
      attempts = 0
      mode = "fail"
    }

    reschedule {
      attempts = 0
      unlimited = false
    }
    {% else %}
    restart {
      attempts = 3
      delay    = "30s"
      interval = "5m"
      mode     = "delay"
    }
    {% endif %}

    network {
      mode = "bridge"

      dns {
        servers = {{ (ansible_facts['dns']['nameservers'] + ['1.1.1.1']) | tojson }}
      }

      {% for port_name, port_details in job.ports[0].items() %}
      port "{{ port_name }}" {
        {% if port_details.get('static') %}
        static = {{ port_details['static'] }}
        {% endif %}
        {% if port_details.get('to') %}
        to = {{ port_details['to'] }}
        {% endif %}
      }
      {% endfor %}
    }

    task "node" {
      driver = "exec"

      {% if profile == 'testnet' %}
      resources {
        cpu    = 6000 # 6 cores
        memory = 32768
      }
      {% elif profile == 'stressnet' %}
      resources {
        cpu    = 2000
        memory = 16384
      }
      {% else %}
      resources {
        cpu    = 1000
        memory = 4096
      }
      {% endif %}

      {% for port_name in job.ports[0] %}
      service {
        name = "{{ job.name }}"
        port = "{{ port_name }}"
        tags = ["{{ port_name }}", "${NOMAD_ALLOC_INDEX}"]
        check {
          type     = "tcp"
          interval = "10s"
          timeout  = "2s"
        }
      }
      {% endfor %}

      artifact {
        source = "{% if env != 'devenv' %}https://primev-infrastructure-artifacts.s3.us-west-2.amazonaws.com{% else %}http://{{ ansible_facts['default_ipv4']['address'] }}:1111{% endif %}/genesis_{{ version }}.json"
        destination = "local/genesis.json"
      }

      artifact {
        source = "{% if env != 'devenv' %}https://primev-infrastructure-artifacts.s3.us-west-2.amazonaws.com{% else %}http://{{ ansible_facts['default_ipv4']['address'] }}:1111{% endif %}/mev-commit-geth_{{ version }}_Linux_{{ target_system_architecture }}.tar.gz"
        destination = "local/"
      }

      template {
        data = <<-EOH
          GETH_DATA_DIR="local/data-{{ "{{" }} env "NOMAD_ALLOC_INDEX" {{ "}}" }}"
          GENESIS_L1_PATH="local/genesis.json"
          GETH_BIN_PATH="local/mev-commit-geth"
          NODE_IP="{{ job.env['ip'] }}"
          {% if job.env['type'] != 'signer' %}
          PUBLIC_NODE_IP="{{ job.env['public_ip'] }}"
          {% endif %}
          NET_RESTRICT="{{ job.env['net_restrict'] }}"
          GETH_NODE_TYPE="{{ job.env['type'] }}"
          GETH_VERBOSITY={{ job.env.get('log-verbosity', '3') }}
          GETH_LOG_FORMAT="{{ job.env.get('log-format', 'json') }}"
          GETH_LOG_TAGS="{{ job.env['log-tags'].items() | map('join', ':') | join('; ') if job.env['log-tags'] is defined and job.env['log-tags'] else 'service:' + job.name + '-{{ "{{" }} env "NOMAD_ALLOC_INDEX" {{ "}}" }}' }}"
          {% if job.env['type'] == 'bootnode' %}
          BOOT_KEY="{{ "{{" }} with secret "secret/data/mev-commit" }}{{ "{{" }} .Data.data.geth_bootnode1_boot_key {{ "}}" }}{{ "{{" }} end }}"
          {% elif job.env['type'] == 'signer' %}
          GETH_KEYSTORE_DIR="/local/data-{{ "{{" }} env "NOMAD_ALLOC_INDEX" {{ "}}" }}/keystore"
          GETH_KEYSTORE_FILENAME="{{ "{{" }} with secret "secret/data/mev-commit" }}{{ "{{" }} .Data.data.{{ job.artifacts | selectattr('keystore', 'defined') | map(attribute='keystore.name') | first }}_filename {{ "}}" }}{{ "{{" }} end }}"
          GETH_KEYSTORE_PASSWORD="{{ "{{" }} with secret "secret/data/mev-commit" }}{{ "{{" }} .Data.data.{{ job.artifacts | selectattr('keystore', 'defined') | map(attribute='keystore.name') | first }}_password {{ "}}" }}{{ "{{" }} end }}"
          {% elif job.env['type'] == 'member' %}
          GETH_SYNC_MODE="{{ job.env['sync_mode'] }}"
          {% endif %}
          {% if job.env['type'] != 'bootnode' %}
          {{ "{{" }}- range nomadService "mev-commit-geth-bootnode1" }}
            {{ "{{" }}- if contains "p2p" .Tags }}
          BOOTNODE_ENDPOINT="enode://{{ "{{" }} with secret "secret/data/mev-commit" }}{{ "{{" }} .Data.data.geth_bootnode1_boot_key_address {{ "}}" }}{{ "{{" }} end }}@{{ "{{" }} .Address }}:{{ "{{" }} .Port }}"
            {{ "{{" }}- end }}
          {{ "{{" }}- end }}
          {% endif %}
        EOH
        destination = "secrets/.env"
        env = true
      }

      template {
        data = <<-EOH
          #!/usr/bin/env bash
          set -euo pipefail

          {{ "{{" }}- range nomadService "datadog-agent-logs-collector" }}
            {{ "{{" }} if contains "tcp" .Tags }}
          exec > >(nc {{ "{{" }} .Address }} {{ "{{" }} .Port }}) 2>&1
            {{ "{{" }} end }}
          {{ "{{" }}- end }}

          mkdir -p "${GETH_DATA_DIR}"

          {% if job.artifacts | selectattr('keystore', 'defined') | list | length > 0 %}
          mkdir -p "${GETH_KEYSTORE_DIR}"
          {{ "{{" }}- with secret "secret/data/mev-commit" }}
          echo '{{ "{{" }} .Data.data.{{ job.artifacts | selectattr('keystore', 'defined') | map(attribute='keystore.name') | first }} }}' > "${GETH_KEYSTORE_DIR}/${GETH_KEYSTORE_FILENAME}"
          {{ "{{" }} end }}
            {% if job.env['type'] == 'signer' %}
          export BLOCK_SIGNER_ADDRESS="$(jq -r '.address' ${GETH_KEYSTORE_DIR}/${GETH_KEYSTORE_FILENAME})"
            {% endif %}
          {% endif %}

          chmod +x local/mev-commit-geth local/entrypoint.sh
          exec local/entrypoint.sh
        EOH
        destination = "local/run.sh"
        perms = "0755"
      }

      config {
        command = "/bin/bash"
        args = ["-c", "local/run.sh"]
      }
    }
  }
}
