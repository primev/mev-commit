#jinja2: trim_blocks:True, lstrip_blocks:True
job "{{ job.name }}" {
  datacenters = ["{{ datacenter }}"]

  group "{{ job.name }}-group" {
    count = {{ job.count }}

    {% if env == 'devenv' %}
    restart {
      attempts = 0
      mode = "fail"
    }

    reschedule {
      attempts = 0
      unlimited = false
    }
    {% endif %}

    network {
      mode = "bridge"

      dns {
        servers = {{ (ansible_facts['dns']['nameservers'] + ['1.1.1.1']) | tojson }}
      }

      {% for port_name, port_details in job.ports[0].items() %}
      port "{{ port_name }}" {
        {% if port_details.get('static') %}
        static = {{ port_details['static'] }}
        {% endif %}
        {% if port_details.get('to') %}
        to = {{ port_details['to'] }}
        {% endif %}
      }
      {% endfor %}
    }

    task "bridge-emulator" {
      driver = "exec"

      {% for port_name in job.ports[0] %}
      service {
        name = "{{ job.name }}"
        port = "{{ port_name }}"
        tags = ["{{ port_name }}"]
        provider = "nomad"
      }
      {% endfor %}

      {% if env != 'devenv' %}
      artifact {
        source = "https://primev-infrastructure-artifacts.s3.us-west-2.amazonaws.com/mev-commit-bridge-emulator_{{ version }}_Linux_{{ target_system_architecture }}.tar.gz"
      }
      artifact {
        source = "https://primev-infrastructure-artifacts.s3.us-west-2.amazonaws.com/contracts_{{ version }}.tar.gz"
      }
      {% else %}
      artifact {
        source = "http://{{ ansible_facts['default_ipv4']['address'] }}:1111/mev-commit-bridge-emulator_{{ version }}_Linux_{{ target_system_architecture }}.tar.gz"
      }
      artifact {
        source = "http://{{ ansible_facts['default_ipv4']['address'] }}:1111/contracts_{{ version }}.tar.gz"
      }
      {% endif %}

      template {
        data = <<-EOH
          EMULATOR_BINARY="local/emulator"
          EMULATOR_LOG_FMT="{{ job.env.get('log-format', 'json') if job.get('env') else 'json' }}"
          EMULATOR_LOG_TAGS="{{ 'service.name:' + job.name + '-{{ env "NOMAD_ALLOC_INDEX" }}' + ',service.version:' + version }}"
          EMULATOR_LOG_LEVEL="{{ job.env.get('log-level', 'info') if job.get('env') else 'info' }}"
          {%- raw %}
          {{- range nomadService "mev-commit-geth-bootnode1" }}
            {{- if contains "http" .Tags }}
          EMULATOR_SETTLEMENT_RPC_URL="http://{{ .Address }}:{{ .Port }}"
            {{- end }}
            {{- if contains "ws" .Tags }}
          EMULATOR_SETTLEMENT_RPC_URL="ws://{{ .Address}}:{{ .Port }}"
            {{- end }}
          {{- end }}
          {{- range nomadService "mock-l1" }}
            {{- if contains "http" .Tags }}
          EMULATOR_L1_RPC_URL="http://{{ .Address }}:{{ .Port }}"
            {{- end }}
            {{- if contains "ws" .Tags }}
          EMULATOR_L1_RPC_URL="ws://{{ .Address}}:{{ .Port }}"
            {{- end }}
          {{- end }}
          EMULATOR_KEYSTORES_DIR="/local/data/{% endraw %}{{ job.name }}{% raw %}-{{ env "NOMAD_ALLOC_INDEX" }}/keystores"
          {% endraw %}
          {%- set emulator_keystores_dir = '/local/data/' ~ job.name ~ '-' ~ '{{ env "NOMAD_ALLOC_INDEX" }}' ~ '/keystores' %}
          {%- set ns = namespace(keystore_path_passwd=[]) %}
          {%- for artifact in job.artifacts %}
            {%- set keystores = artifact.get('keystores', {}) %}
            {%- set ns.keystore_path_passwd = ns.keystore_path_passwd + (keystores | list) %}
          {%- endfor %}
          {%- set ns.kp_pairs = [] %}
          {%- macro nomad_interpolate(var_name) -%}
          {{ '{{ with secret "secret/data/mev-commit" }}{{ .Data.data.' ~ var_name ~ ' }}{{ end }}' }}
          {%- endmacro %}
          {%- for keystore_name in ns.keystore_path_passwd %}
            {%- set filename_var = keystore_name + '_filename' %}
            {%- set password_var = keystore_name + '_password' %}
            {%- set pair = emulator_keystores_dir ~ '/' ~ keystore_name ~ '/' ~ nomad_interpolate(filename_var) ~ ':' ~ nomad_interpolate(password_var) %}
            {%- set ns.kp_pairs = ns.kp_pairs + [pair] %}
          {%- endfor %}
          EMULATOR_KEYSTORE_PATH_PASSWORD={{ ns.kp_pairs | join(',') | replace('\\n', '') | replace('\\r', '') }}
        EOH
        destination = "secrets/.env"
        env = true
      }

      template {
        data = <<-EOH
          #!/usr/bin/env bash

          {% raw %}
          {{- range nomadService "datadog-agent-logs-collector" }}
            {{ if contains "tcp" .Tags }}
          exec > >(nc {{ .Address }} {{ .Port }}) 2>&1
            {{ end }}
          {{- end }}
          {% endraw %}

          if [ ! -d ${EMULATOR_KEYSTORES_DIR} ]; then
            {%- macro ldelim() %}{{ '{{' }}{% endmacro %}
            {%- macro rdelim() %}{{ '}}' }}{% endmacro %}
            {%- set ns = namespace(keystore_path_passwd=[]) %}
            {%- for artifact in job.artifacts %}
              {% set keystores = artifact.get('keystores', {}) %}
              {% set ns.keystore_path_passwd = ns.keystore_path_passwd + (keystores | list) %}
            {% endfor %}
            {%- for keystore_name in ns.keystore_path_passwd %}
              {{ ldelim() }} with secret "secret/data/mev-commit" {{ rdelim() }}
              mkdir -p "${EMULATOR_KEYSTORES_DIR}/{{ keystore_name }}" > /dev/null 2>&1
              echo '{{ ldelim() }} .Data.data.{{ keystore_name }} {{ rdelim() }}' > "${EMULATOR_KEYSTORES_DIR}/{{ keystore_name }}/{{ ldelim() }} .Data.data.{{ keystore_name }}_filename {{ rdelim() }}"
              {{ ldelim() }} end {{ rdelim() }}
            {% endfor %}
          fi

          {% raw %}
          {{- range nomadService "contracts-deployer" }}
            {{ if contains "http" .Tags }}
          URL="http://{{ .Address }}:{{ .Port }}/contracts.json"
          CONTRACTS_FILE="/local/contracts.json"
          curl -s -o "${CONTRACTS_FILE}" "${URL}"
          export EMULATOR_L1_GATEWAY_CONTRACT_ADDR="$(jq -r '.L1Gateway' ${CONTRACTS_FILE})"
          export EMULATOR_SETTLEMENT_GATEWAY_CONTRACT_ADDR="$(jq -r '.SettlementGateway' ${CONTRACTS_FILE})"
            {{ end }}
          {{- end }}

          {{- range nomadService "{% endraw %}{{ job.name }}{% raw %}" }}
            {{- if contains "metrics" .Tags }}
          export EMULATOR_HTTP_PORT="{{ .Port }}"
            {{- end }}
          {{- end }}
          {% endraw %}

          chmod +x ${EMULATOR_BINARY}
          exec ${EMULATOR_BINARY}
        EOH
        destination = "local/run.sh"
        change_mode = "noop"
        perms = "0755"
      }

      config {
        command = "bash"
        args = ["-c", "exec local/run.sh"]
      }
    }
  }
}
