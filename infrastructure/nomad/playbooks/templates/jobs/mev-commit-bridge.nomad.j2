#jinja2: trim_blocks:True, lstrip_blocks:True
job "{{ job.name }}" {
  datacenters = ["{{ datacenter }}"]

  group "{{ job.name }}-group" {
    count = {{ job.count }}

    {% if env == 'devenv' %}
    restart {
      attempts = 0
      mode = "fail"
    }

    reschedule {
      attempts = 0
      unlimited = false
    }
    {% endif %}

    network {
      mode = "bridge"

      dns {
        servers = {{ (ansible_facts['dns']['nameservers'] + ['1.1.1.1']) | tojson }}
      }

      {% for port_name, port_details in job.ports[0].items() %}
      port "{{ port_name }}" {
        {% if port_details.get('static') %}
        static = {{ port_details['static'] }}
        {% endif %}
        {% if port_details.get('to') %}
        to = {{ port_details['to'] }}
        {% endif %}
      }
      {% endfor %}
    }

    {% for port_name in job.ports[0] %}
    service {
      name = "{{ job.name }}"
      port = "{{ port_name }}"
      tags = ["{{ port_name }}"]
      provider = "nomad"
      {% if port_name == "http" %}
      check {
        type     = "http"
        path     = "/health"
        interval = "10s"
        timeout  = "2s"
      }
      {% endif %}
    }
    {% endfor %}

    task "db" {
      driver = "exec"

      lifecycle {
        hook    = "prestart"
        sidecar = true
      }

      {% if profile == 'testnet' %}
      resources {
        cores = 4
        memory = 8192
      }
      {% elif profile == 'stressnet' %}
      resources {
        memory = 4096
      }
      {% endif %}

      template {
        data = <<-EOH
          POSTGRES_VERSION="15"
          POSTGRES_DB="mev_commit_bridge"
          POSTGRES_USERNAME="mev_commit_bridge"
          POSTGRES_PASSWORD="{{ lookup('password', '/dev/null', length=64) }}"
          {%- raw %}
          POSTGRES_DATA="/local/pgdata-{{ env "NOMAD_ALLOC_INDEX" }}"
          {{- range nomadService "{% endraw %}{{ job.name }}{% raw %}" }}
            {{- if contains "db" .Tags }}
          POSTGRES_PORT="{{ .Port }}"
            {{- end }}
          {{- end }}
          {% endraw %}
        EOH
        destination = "alloc/data/postgres.env"
        env = true
      }

      template {
        data = <<-EOH
          #!/usr/bin/env bash

          {% raw %}
          {{- range nomadService "datadog-agent-logs-collector" }}
            {{ if contains "tcp" .Tags }}
          exec > >(nc {{ .Address }} {{ .Port }}) 2>&1
            {{ end }}
          {{- end }}

          if [ -d "${POSTGRES_DATA}" ]; then
            echo "Initialized and configured database found."
            cp "${POSTGRES_DATA}/.env" /alloc/data/postgres.env
            source "${POSTGRES_DATA}/.env"
            postgres -D ${POSTGRES_DATA}
            exit $?
          fi

          export PATH="/usr/lib/postgresql/${POSTGRES_VERSION}/bin:${PATH}"
          mkdir -p /var/run/postgresql > /dev/null 2>&1
          pg_ctl initdb --silent --pgdata="${POSTGRES_DATA}"
          if [ $? -ne 0 ]; then
            echo "Failed to initialize PostgreSQL."
            exit 1
          fi
          cp /alloc/data/postgres.env "${POSTGRES_DATA}/.env"

          pg_ctl start --pgdata="${POSTGRES_DATA}" --silent --wait --timeout=300 > /dev/null 2>&1
          if [ $? -ne 0 ]; then
            echo "Failed to start PostgreSQL."
            exit 1
          fi

          createuser --superuser postgres > /dev/null 2>&1
          createuser --username=postgres --createdb "${POSTGRES_USERNAME}"
          createdb --username="${POSTGRES_USERNAME}" "${POSTGRES_DB}"
          psql --quiet \
               --username="${POSTGRES_USERNAME}" \
               --dbname="${POSTGRES_DB}" \
               --command="ALTER USER ${POSTGRES_USERNAME} WITH PASSWORD '${POSTGRES_PASSWORD}'; \
                          GRANT ALL PRIVILEGES ON DATABASE ${POSTGRES_DB} TO ${POSTGRES_USERNAME};"
          echo "Database initialized and configured successfully."

          pg_ctl stop --pgdata="${POSTGRES_DATA}" --silent --wait --timeout=300 > /dev/null 2>&1
          if [ $? -ne 0 ]; then
            echo "Failed to stop PostgreSQL."
            exit 1
          fi

          exec postgres -D "${POSTGRES_DATA}" -p "${POSTGRES_PORT}"
          {% endraw %}
        EOH
        destination = "local/run.sh"
        change_mode = "noop"
        perms = "0755"
      }

      config {
        command = "bash"
        args = ["-c", "exec local/run.sh"]
      }
    }

    task "relayer" {
      driver = "exec"

      {% if profile == 'testnet' %}
      resources {
        cores = 4
        memory = 8192
      }
      {% elif profile == 'stressnet' %}
      resources {
        cpu = 4000
        memory = 4096
      }
      {% endif %}

      artifact {
        source = "https://foundry.paradigm.xyz"
        destination = "local/foundry.sh"
      }

      {% if env != 'devenv' %}
      artifact {
        source = "https://primev-infrastructure-artifacts.s3.us-west-2.amazonaws.com/contracts_{{ version }}.tar.gz"
      }
      artifact {
        source = "https://primev-infrastructure-artifacts.s3.us-west-2.amazonaws.com/mev-commit-bridge-relayer_{{ version }}_Linux_{{ target_system_architecture }}.tar.gz"
      }
      {% else %}
      artifact {
        source = "http://{{ ansible_facts['default_ipv4']['address'] }}:1111/contracts_{{ version }}.tar.gz"
      }
      artifact {
        source = "http://{{ ansible_facts['default_ipv4']['address'] }}:1111/mev-commit-bridge-relayer_{{ version }}_Linux_{{ target_system_architecture }}.tar.gz"
      }
      {% endif %}

      template {
        data = <<-EOH
          {%- raw %}
          {{- with secret "secret/data/mev-commit" }}
          {{- .Data.data.bridge_relayer_private_key }}
          {{- end }}
          {% endraw %}
        EOH
        destination = "secrets/relayer_key"
        perms = "0600"
      }

      template {
        data = <<-EOH
          XDG_CONFIG_HOME="local/.config"
          STANDARD_BRIDGE_RELAYER_LOG_LEVEL="{{ job.env.get('log-level', 'debug') }}"
          STANDARD_BRIDGE_RELAYER_LOG_FMT="{{ job.env.get('log-format', 'json') }}"
          STANDARD_BRIDGE_RELAYER_LOG_TAGS="{{ 'service.name:' + job.name + '-{{ env "NOMAD_ALLOC_INDEX" }}' + ',service.version:' + version }}"
          {%- raw %}
          STANDARD_BRIDGE_RELAYER_KEYSTORE_DIR="/local/data-{{ env "NOMAD_ALLOC_INDEX" }}/keystore"
          STANDARD_BRIDGE_RELAYER_KEYSTORE_FILENAME="{{ with secret "secret/data/mev-commit" }}{{ .Data.data.bridge_relayer_keystore_filename }}{{ end }}"
          STANDARD_BRIDGE_RELAYER_KEYSTORE_PASSWORD="{{ with secret "secret/data/mev-commit" }}{{ .Data.data.bridge_relayer_keystore_password }}{{ end }}"
          {{- range nomadService "mev-commit-geth-bootnode1" }}
            {{- if contains "http" .Tags }}
          STANDARD_BRIDGE_RELAYER_SETTLEMENT_RPC_URL="http://{{ .Address }}:{{ .Port }}"
            {{- end }}
          {{- end }}
          {{- range nomadService "{% endraw %}{{ job.name }}{% raw %}" }}
            {{- if contains "db" .Tags }}
          STANDARD_BRIDGE_RELAYER_PG_HOST="localhost"
          STANDARD_BRIDGE_RELAYER_PG_PORT="{{ .Port }}"
            {{- end }}
          {{- end }}
          {% endraw %}
          STANDARD_BRIDGE_RELAYER_L1_RPC_URL="{{ job.env['l1_rpc_url'] }}"
          L1_CHAIN_ID="{{ job.env['l1_chain_id'] }}"
          CONTRACTS_PATH="local/contracts"
          ARTIFACT_OUT_PATH="local"
        EOH
        destination = "secrets/.env"
        env = true
      }

      template {
        data = <<-EOH
          #!/usr/bin/env bash

          {% raw %}
          {{- range nomadService "datadog-agent-logs-collector" }}
            {{ if contains "tcp" .Tags }}
          exec > >(nc {{ .Address }} {{ .Port }}) 2>&1
            {{ end }}
          {{- end }}
          {% endraw %}

          if [ ! -d ${STANDARD_BRIDGE_RELAYER_KEYSTORE_DIR} ]; then
            mkdir -p "${STANDARD_BRIDGE_RELAYER_KEYSTORE_DIR}" > /dev/null 2>&1
            {%- raw %}
              {{- with secret "secret/data/mev-commit" }}
            echo '{{ .Data.data.bridge_relayer_keystore }}' > "${STANDARD_BRIDGE_RELAYER_KEYSTORE_DIR}/${STANDARD_BRIDGE_RELAYER_KEYSTORE_FILENAME}"
              {{ end }}
            {% endraw %}
          fi

          {% raw %}
          {{- range nomadService "contracts-deployer" }}
            {{ if contains "http" .Tags }}
          URL="http://{{ .Address }}:{{ .Port }}/contracts.json"
          CONTRACTS_FILE="/local/contracts.json"
          curl -s -o "${CONTRACTS_FILE}" "${URL}"
          export STANDARD_BRIDGE_RELAYER_SETTLEMENT_CONTRACT_ADDR="$(jq -r '.SettlementGateway' ${CONTRACTS_FILE})"
          export STANDARD_BRIDGE_RELAYER_L1_CONTRACT_ADDR="$(jq -r '.L1Gateway' ${CONTRACTS_FILE})"
            {{ end }}
          {{- end }}
          {% endraw %}

          source alloc/data/postgres.env
          export STANDARD_BRIDGE_RELAYER_PG_USER="${POSTGRES_USERNAME}"
          export STANDARD_BRIDGE_RELAYER_PG_PASSWORD="${POSTGRES_PASSWORD}"
          export STANDARD_BRIDGE_RELAYER_PG_DBNAME="${POSTGRES_DB}"

          if ! timeout 5m bash -c 'until pg_isready -h ${STANDARD_BRIDGE_RELAYER_PG_HOST} -p ${STANDARD_BRIDGE_RELAYER_PG_PORT} -U ${STANDARD_BRIDGE_RELAYER_PG_USER} -d ${STANDARD_BRIDGE_RELAYER_PG_DBNAME}; do sleep 2; done'; then
            echo "Waiting for PostgreSQL to start..."
            sleep 3
          fi

          chmod +x local/relayer
          exec ./local/relayer start
        EOH
        destination = "local/run.sh"
        change_mode = "noop"
        perms = "0755"
      }

      config {
        command = "bash"
        args = ["-c", "exec local/run.sh"]
      }
    }
  }
}
