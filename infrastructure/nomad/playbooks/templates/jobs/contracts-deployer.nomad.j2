#jinja2: trim_blocks:True, lstrip_blocks:True
job "{{ job.name }}" {
  datacenters = ["{{ datacenter }}"]

  group "{{ job.name }}-group" {
    count = {{ job.count }}

    # This is a special case for CI because the runner machine is not very
    # powerful and compiling and deploying contracts can take a long time.
    {% if env == 'devenv' and profile == 'ci' %}
    update {
      healthy_deadline = "20m"
      progress_deadline = "30m"
    }
    {% else %}
    update {
      healthy_deadline = "10m"
      progress_deadline = "15m"
    }
    {% endif %}

    {% if env == 'devenv' %}
    restart {
      attempts = 0
      mode = "fail"
    }

    reschedule {
      attempts = 0
      unlimited = false
    }
    {% endif %}

    network {
      dns {
        servers = {{ (ansible_facts['dns']['nameservers'] + ['1.1.1.1']) | tojson }}
      }

      {% for port_name, port_details in job.ports[0].items() %}
      port "{{ port_name }}" {
        {% if port_details.get('static') %}
        static = {{ port_details['static'] }}
        {% endif %}
        {% if port_details.get('to') %}
        to = {{ port_details['to'] }}
        {% endif %}
      }
      {% endfor %}
    }

    task "contracts" {
      driver = "exec"

      {% for port_name in job.ports[0] %}
      service {
        name = "{{ job.name }}"
        port = "{{ port_name }}"
        tags = ["{{ port_name }}"]
        provider = "nomad"

        check {
          type = "http"
          path = "/"
          port = "{{ port_name }}"
          interval = "10s"
          timeout  = "5s"
        }
      }
      {% endfor %}

      artifact {
        source = "https://nodejs.org/dist/v18.20.4/node-v18.20.4-linux-{{ 'x64' if target_system_architecture == 'x86_64' else 'arm64' }}.tar.xz"
        options {
          archive = false
        }
      }

      artifact {
        source = "https://foundry.paradigm.xyz"
        destination = "local/foundry.sh"
      }

      {% if env != 'devenv' %}
      artifact {
        source = "https://primev-infrastructure-artifacts.s3.us-west-2.amazonaws.com/contracts_{{ version }}.tar.gz"
      }
      {% else %}
      artifact {
        source = "http://{{ ansible_facts['default_ipv4']['address'] }}:1111/contracts_{{ version }}.tar.gz"
      }
      {% endif %}

      template {
        data = <<-EOH
          XDG_CONFIG_HOME="local/.config"
          {%- raw %}
          {{- range nomadService "mev-commit-geth-bootnode1" }}
            {{- if contains "http" .Tags }}
          RPC_URL="http://{{ .Address }}:{{ .Port }}"
            {{- end }}
          {{- end }}
          KEYSTORE_DIR="/local/data-{{ env "NOMAD_ALLOC_INDEX" }}/keystore"
          KEYSTORE_FILENAME="{{ with secret "secret/data/mev-commit" }}{{ .Data.data.{% endraw %}{{ job.artifacts | selectattr('keystore', 'defined') | map(attribute='keystore.name') | first }}{% raw %}_filename }}{{ end }}"
          KEYSTORE_PASSWORD="{{ with secret "secret/data/mev-commit" }}{{ .Data.data.{% endraw %}{{ job.artifacts | selectattr('keystore', 'defined') | map(attribute='keystore.name') | first }}{% raw %}_password }}{{ end }}"
          {% endraw %}
          CHAIN_ID="{{ job.env['chain-id'] }}"
          SCRIPT_PATH_PREFIX="local/contracts/scripts/"
          CONTRACT_REPO_ROOT_PATH="local/contracts"
        EOH
        destination = "secrets/.env"
        env = true
      }

      template {
        data = <<-EOH
          #!/usr/bin/env bash

          {%- raw %}
          {{- range nomadService "datadog-agent-logs-collector" }}
            {{ if contains "tcp" .Tags }}
          exec > >(nc {{ .Address }} {{ .Port }}) 2>&1
            {{ end }}
          {{- end }}
          {% endraw %}

          {%- if job.artifacts | selectattr('keystore', 'defined') | list | length > 0 %}
          mkdir -p "${KEYSTORE_DIR}" > /dev/null 2>&1
          {%- raw %}
            {{- with secret "secret/data/mev-commit" }}
          echo '{{ .Data.data.{% endraw %}{{ job.artifacts | selectattr('keystore', 'defined') | map(attribute='keystore.name') | first }}{% raw %} }}' > "${KEYSTORE_DIR}/${KEYSTORE_FILENAME}"
          export SENDER=$(cat "${KEYSTORE_DIR}/${KEYSTORE_FILENAME}" | jq -r '.address')
            {{ end }}
          {% endraw %}
          {% endif %}

          tar \
            --extract \
            --file local/node-v18.20.4-linux-{{ 'x64' if target_system_architecture == 'x86_64' else 'arm64' }}.tar.xz \
            --directory /usr/local \
            --strip-components=1

          chmod +x local/foundry.sh && local/foundry.sh
          chmod +x ${XDG_CONFIG_HOME}/.foundry/bin/foundryup && ${XDG_CONFIG_HOME}/.foundry/bin/foundryup
          export PATH="${XDG_CONFIG_HOME}/.foundry/bin:$PATH"

          start_time=$(date +%s)
          echo "Deploying contracts..."
          export DEPLOY_TYPE="core"
          {% raw %}
            {{ with secret "secret/data/mev-commit" }}
          echo '{{ .Data.data.oracle_keystore }}' > local/oracle_keystore
            {{ end }}
          {% endraw %}
          export ORACLE_KEYSTORE_ADDRESS=$(jq -r '.address' local/oracle_keystore)
          chmod +x ${CONTRACT_REPO_ROOT_PATH}/entrypoint.sh
          LOGS="$(${CONTRACT_REPO_ROOT_PATH}/entrypoint.sh)"
          if [ $? -ne 0 ]; then
            echo "Failed to deploy contracts!"
            exit 1
          fi
          end_time=$(date +%s)
          echo "Contracts deployed successfully in: $(date -ud @$((end_time - start_time)) +'%H:%M:%S')."
          echo "${LOGS}"

          # TODO: this is a workaround to get the contract addresses, remove this once create3 is used.
          TRANSACTIONS="${CONTRACT_REPO_ROOT_PATH}/broadcast/DeployCore.s.sol/{{ job.env['chain-id'] }}/run-latest.json"
          mkdir -p /local/www > /dev/null 2>&1
          echo "${LOGS}" \
          | sed -n '/{.*}/p' \
          | jq -c 'reduce .logs[] as $item ({}; . + {($item | split(": ")[0]): ($item | split(": ")[1])})' \
          | jq -c 'with_entries(select(.key | startswith("_") | not))' \
          > local/www/contracts.json

          exec python3 -m http.server {{ job.ports[0]['http']['static'] }} --directory /local/www
          # endtodo
        EOH
        destination = "local/run.sh"
        perms = "0755"
      }

      config {
        command = "bash"
        args = ["-c", "exec local/run.sh"]
      }
    }
  }
}
