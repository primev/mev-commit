#jinja2: trim_blocks:True, lstrip_blocks:True
job "{{ job.name }}" {
  datacenters = ["{{ datacenter }}"]

  group "{{ job.name }}-group" {
    count = {{ job.count }}

    {% if env == 'devenv' %}
    restart {
      attempts = 0
      mode = "fail"
    }

    reschedule {
      attempts = 0
      unlimited = false
    }
    {% endif %}

    network {
      mode = "bridge"

      dns {
        servers = {{ (ansible_facts['dns']['nameservers'] + ['1.1.1.1']) | tojson }}
      }

      {% for port_name, port_details in job.ports[0].items() %}
      port "{{ port_name }}" {
        {% if port_details.get('static') %}
        static = {{ port_details['static'] }}
        {% endif %}
        {% if port_details.get('to') %}
        to = {{ port_details['to'] }}
        {% endif %}
      }
      {% endfor %}
    }

    {% for port_name in job.ports[0] %}
    service {
      name = "{{ job.name }}"
      port = "{{ port_name }}"
      tags = ["{{ port_name }}"]
      provider = "nomad"
    }
    {% endfor %}

    task "db" {
      driver = "exec"

      lifecycle {
        hook    = "prestart"
        sidecar = true
      }

      {% if profile == 'testnet' or profile == 'mainnet' %}
      resources {
        cores = 4
        memory = 8192
      }
      {% endif %}

      template {
        data = <<-EOH
          POSTGRES_VERSION="15"
          POSTGRES_DB="mev_oracle"
          POSTGRES_USERNAME="mev_oracle"
          POSTGRES_PASSWORD="{{ lookup('password', '/dev/null', length=64) }}"
          POSTGRES_DATA="/local/pgdata-{% raw %}{{ env "NOMAD_ALLOC_INDEX" }}{% endraw %}"
          POSTGRES_PORT="54321"
        EOH
        destination = "alloc/data/postgres.env"
        env = true
      }

      template {
        data = <<-EOH
          #!/usr/bin/env bash

          {% raw %}
          {{- range nomadService "datadog-agent-logs-collector" }}
            {{ if contains "tcp" .Tags }}
          exec > >(nc {{ .Address }} {{ .Port }}) 2>&1
            {{ end }}
          {{- end }}

          if [ -d "${POSTGRES_DATA}" ]; then
            echo "Initialized and configured database found."
            cp "${POSTGRES_DATA}/.env" /alloc/data/postgres.env
            source "${POSTGRES_DATA}/.env"
            postgres -D ${POSTGRES_DATA}
            exit $?
          fi

          export PATH="/usr/lib/postgresql/${POSTGRES_VERSION}/bin:${PATH}"
          mkdir -p /var/run/postgresql > /dev/null 2>&1
          pg_ctl initdb --silent --pgdata="${POSTGRES_DATA}"
          if [ $? -ne 0 ]; then
            echo "Failed to initialize PostgreSQL."
            exit 1
          fi
          cp /alloc/data/postgres.env "${POSTGRES_DATA}/.env"

          pg_ctl start --pgdata="${POSTGRES_DATA}" --silent --wait --timeout=300 > /dev/null 2>&1
          if [ $? -ne 0 ]; then
            echo "Failed to start PostgreSQL."
            exit 1
          fi

          createuser --superuser postgres > /dev/null 2>&1
          createuser --username=postgres --createdb "${POSTGRES_USERNAME}"
          createdb --username="${POSTGRES_USERNAME}" "${POSTGRES_DB}"
          psql --quiet \
               --username="${POSTGRES_USERNAME}" \
               --dbname="${POSTGRES_DB}" \
               --command="ALTER USER ${POSTGRES_USERNAME} WITH PASSWORD '${POSTGRES_PASSWORD}'; \
                          GRANT ALL PRIVILEGES ON DATABASE ${POSTGRES_DB} TO ${POSTGRES_USERNAME};"
          echo "Database initialized and configured successfully."

          pg_ctl stop --pgdata="${POSTGRES_DATA}" --silent --wait --timeout=300 > /dev/null 2>&1
          if [ $? -ne 0 ]; then
            echo "Failed to stop PostgreSQL."
            exit 1
          fi

          exec postgres -D "${POSTGRES_DATA}" -p "${POSTGRES_PORT}"
          {% endraw %}
        EOH
        destination = "local/run.sh"
        change_mode = "noop"
        perms = "0755"
      }

      config {
        command = "bash"
        args = ["-c", "exec local/run.sh"]
      }
    }

    task "points-service" {
      driver = "exec"

      {% if env != 'devenv' %}
      artifact {
        source = "https://primev-infrastructure-artifacts.s3.us-west-2.amazonaws.com/points-service_{{ version }}_Linux_{{ target_system_architecture }}.tar.gz"
      }
      {% else %}
      artifact {
        source = "http://{{ ansible_facts['default_ipv4']['address'] }}:1111/points-service_{{ version }}_Linux_{{ target_system_architecture }}.tar.gz"
      }
      {% endif %}

      template {
        data = <<-EOH
          POINTS_LOG_FMT="{{ job.env.get('log-format', 'json') }}"
          POINTS_LOG_TAGS="{{ 'service.name:' + job.name + '-{{ env "NOMAD_ALLOC_INDEX" }}' + ',service.version:' + version }}"
          POINTS_LOG_LEVEL="{{ job.env.get('log-level', 'info') }}"
          POINTS_L1_RPC_URL="{{ job.env['l1_rpc_url'] }}"
        EOH
        destination = "secrets/.env"
        env = true
      }

      template {
        data = <<-EOH
          #!/usr/bin/env bash

          {% raw %}
          {{- range nomadService "datadog-agent-logs-collector" }}
            {{ if contains "tcp" .Tags }}
          exec > >(nc {{ .Address }} {{ .Port }}) 2>&1
            {{ end }}
          {{- end }}

          source alloc/data/postgres.env
          export POINTS_PG_HOST="localhost"
          export POINTS_PG_PORT="${POSTGRES_PORT}"
          export POINTS_PG_USER="${POSTGRES_USERNAME}"
          export POINTS_PG_PASSWORD="${POSTGRES_PASSWORD}"
          export POINTS_PG_DBNAME="${POSTGRES_DB}"

          if ! timeout 5m bash -c 'until pg_isready -h ${POINTS_PG_HOST} -p ${POINTS_PG_PORT} -U ${POINTS_PG_USER} -d ${POINTS_PG_DBNAME}; do sleep 2; done'; then
            echo "Waiting for PostgreSQL to start..."
            sleep 3
          fi

          chmod +x local/points-service
          exec local/points-service
          {% endraw %}
        EOH
        destination = "local/run.sh"
        change_mode = "noop"
        perms = "0755"
      }

      config {
        command = "bash"
        args = ["-c", "exec local/run.sh"]
      }
    }
  }
}
