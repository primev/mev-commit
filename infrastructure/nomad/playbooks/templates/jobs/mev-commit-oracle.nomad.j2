#jinja2: trim_blocks:True, lstrip_blocks:True
job "{{ job.name }}" {
  datacenters = ["{{ datacenter }}"]

  group "{{ job.name }}-group" {
    count = {{ job.count }}

    network {
      mode = "bridge"

      dns {
        servers = {{ (ansible_facts['dns']['nameservers'] + ['1.1.1.1']) | tojson }}
      }

      {% for port_name, port_details in job.ports[0].items() %}
      port "{{ port_name }}" {
        {% if port_details.get('static') %}
        static = {{ port_details['static'] }}
        {% endif %}
        {% if port_details.get('to') %}
        to = {{ port_details['to'] }}
        {% endif %}
      }
      {% endfor %}
    }

    {% for port_name in job.ports[0] %}
    service {
      name = "{{ job.name }}"
      port = "{{ port_name }}"
      tags = ["{{ port_name }}"]
      provider = "nomad"
    }
    {% endfor %}

    task "db" {
      driver = "exec"

      lifecycle {
        hook    = "prestart"
        sidecar = true
      }

      {% if profile == 'testnet' %}
      resources {
        cores = 4
        memory = 8192
      }
      {% elif profile == 'stressnet' %}
      resources {
        memory = 4096
      }
      {% endif %}

      template {
        data = <<-EOH
          POSTGRES_VERSION="15"
          POSTGRES_DB="mev_oracle"
          POSTGRES_USERNAME="mev_oracle"
          POSTGRES_PASSWORD="{{ lookup('password', '/dev/null', length=64) }}"
          POSTGRES_DATA="/local/pgdata-{% raw %}{{ env "NOMAD_ALLOC_INDEX" }}{% endraw %}"
        EOH
        destination = "alloc/data/postgres.env"
        env = true
      }

      template {
        data = <<-EOH
          #!/usr/bin/env bash

          {% raw %}
          {{- range nomadService "datadog-agent-logs-collector" }}
            {{ if contains "tcp" .Tags }}
          exec > >(nc {{ .Address }} {{ .Port }}) 2>&1
            {{ end }}
          {{- end }}

          if [ -d "${POSTGRES_DATA}" ]; then
            echo "Initialized and configured database found."
            cp "${POSTGRES_DATA}/.env" /alloc/data/postgres.env
            source "${POSTGRES_DATA}/.env"
            postgres -D ${POSTGRES_DATA}
            exit $?
          fi

          export PATH="/usr/lib/postgresql/${POSTGRES_VERSION}/bin:${PATH}"
          mkdir -p /var/run/postgresql > /dev/null 2>&1
          pg_ctl initdb --silent --pgdata="${POSTGRES_DATA}"
          if [ $? -ne 0 ]; then
            echo "Failed to initialize database."
            exit 1
          fi
          cp /alloc/data/postgres.env "${POSTGRES_DATA}/.env"
          postgres -D "${POSTGRES_DATA}" &
          pid=$!

          if ! timeout 5m bash -c 'until pg_ctl status --pgdata="${POSTGRES_DATA}" --silent --no-wait; do sleep 1; done'; then
            echo "Waiting for PostgreSQL to start..."
            sleep 1
          fi

          createuser --superuser postgres > /dev/null 2>&1
          createuser --username=postgres --createdb "${POSTGRES_USERNAME}"
          createdb --username="${POSTGRES_USERNAME}" "${POSTGRES_DB}"
          psql --quiet \
               --username="${POSTGRES_USERNAME}" \
               --dbname="${POSTGRES_DB}" \
               --command="ALTER USER ${POSTGRES_USERNAME} WITH PASSWORD '${POSTGRES_PASSWORD}'; \
                          GRANT ALL PRIVILEGES ON DATABASE ${POSTGRES_DB} TO ${POSTGRES_USERNAME};"
          echo "Database initialized and configured successfully."

          wait $pid
          {% endraw %}
        EOH
        destination = "local/run.sh"
        perms = "0755"
      }

      config {
        command = "bash"
        args = ["-c", "local/run.sh"]
      }
    }

    task "oracle" {
      driver = "exec"

      {% if profile == 'testnet' %}
      resources {
        cores = 4
        memory = 8192
      }
      {% elif profile == 'stressnet' %}
      resources {
        memory = 1024
      }
      {% endif %}

      {% if env != 'devenv' %}
      artifact {
        source = "https://primev-infrastructure-artifacts.s3.us-west-2.amazonaws.com/mev-commit-oracle_{{ version }}_Linux_{{ target_system_architecture }}.tar.gz"
      }
      artifact {
        source = "https://primev-infrastructure-artifacts.s3.us-west-2.amazonaws.com/contracts_{{ version }}.tar.gz"
      }
      {% else %}
      artifact {
        source = "http://{{ ansible_facts['default_ipv4']['address'] }}:1111/mev-commit-oracle_{{ version }}_Linux_{{ target_system_architecture }}.tar.gz"
      }
      artifact {
        source = "http://{{ ansible_facts['default_ipv4']['address'] }}:1111/contracts_{{ version }}.tar.gz"
      }
      {% endif %}

      template {
        data = <<-EOH
          KEYSTOREGEN_LOG_FMT="{{ job.env.get('log-format', 'json') }}"
          KEYSTOREGEN_LOG_TAGS="{{
            job.env['log-tags'].items() | map('join', ':') | join('; ')
            if job.env['log-tags'] is defined and job.env['log-tags']
            else 'service:' + job.name + '-{{ env "NOMAD_ALLOC_INDEX" }}'
          }}"
          MEV_ORACLE_LOG_FMT="{{ job.env.get('log-format', 'json') }}"
          MEV_ORACLE_LOG_TAGS="{{
            job.env['log-tags'].items() | map('join', ':') | join('; ')
            if job.env['log-tags'] is defined and job.env['log-tags']
            else 'service:' + job.name + '-{{ env "NOMAD_ALLOC_INDEX" }}'
          }}"
          MEV_ORACLE_LOG_LEVEL="{{ job.env.get('log-level', 'info') }}"
          MEV_ORACLE_LAGGERD_MODE="{{ job.env.get('laggerd-mode', '20') }}"
          MEV_ORACLE_L1_RPC_URL="{{ job.env['l1_rpc_url'] }}"
          {%- raw %}
          MEV_ORACLE_KEYSTORE_PATH="/local/data-{{ env "NOMAD_ALLOC_INDEX" }}/keystore"
          MEV_ORACLE_KEYSTORE_FILENAME="{{ with secret "secret/data/mev-commit" }}{{ .Data.data.{% endraw %}{{ job.artifacts | selectattr('keystore', 'defined') | map(attribute='keystore.name') | first }}{% raw %}_filename }}{{ end }}"
          MEV_ORACLE_KEYSTORE_PASSWORD="{{ with secret "secret/data/mev-commit" }}{{ .Data.data.{% endraw %}{{ job.artifacts | selectattr('keystore', 'defined') | map(attribute='keystore.name') | first }}{% raw %}_password }}{{ end }}"
          MEV_ORACLE_REGISTER_PROVIDER_API_AUTH_TOKEN="{{ with secret "secret/data/mev-commit" }}{{ .Data.data.oracle_register_provider_api_auth_token }}{{ end }}"
          {{- range nomadService "mev-commit-oracle" }}
            {{- if contains "http" .Tags }}
          MEV_ORACLE_HTTP_PORT="{{ .Port }}"
            {{- end }}
          {{- end }}
          {{- range nomadService "mev-commit-geth-bootnode1" }}
            {{- if contains "http" .Tags }}
          MEV_ORACLE_SETTLEMENT_RPC_URL_HTTP="http://{{ .Address }}:{{ .Port }}"
            {{- end }}
            {{- if contains "ws" .Tags }}
          MEV_ORACLE_SETTLEMENT_RPC_URL_WS="ws://{{ .Address}}:{{ .Port }}"
            {{- end }}
          {{- end }}
          {{- range nomadService "{% endraw %}{{ job.name }}{% raw %}" }}
            {{- if contains "db" .Tags }}
          MEV_ORACLE_PG_HOST="localhost"
          MEV_ORACLE_PG_PORT="{{ .Port }}"
            {{- end }}
          {{- end }}
          {% endraw %}
        EOH
        destination = "secrets/.env"
        env = true
      }

      template {
        data = <<-EOH
          #!/usr/bin/env bash

          {% raw %}
          {{- range nomadService "datadog-agent-logs-collector" }}
            {{ if contains "tcp" .Tags }}
          exec > >(nc {{ .Address }} {{ .Port }}) 2>&1
            {{ end }}
          {{- end }}

          mkdir -p "${MEV_ORACLE_KEYSTORE_PATH}" > /dev/null 2>&1
            {{- with secret "secret/data/mev-commit" }}
          echo '{{ .Data.data.{% endraw %}{{ job.artifacts | selectattr('keystore', 'defined') | map(attribute='keystore.name') | first }}{% raw %} }}' > "${MEV_ORACLE_KEYSTORE_PATH}/${MEV_ORACLE_KEYSTORE_FILENAME}"
            {{ end }}

          {% endraw %}
          {% if env == 'devenv' %}
          {% raw %}
          MEV_ORACLE_OVERRIDE_WINNERS=""

          {{- range nomadService "mev-commit-provider-node1" }}
            {{- if contains "http" .Tags }}
          URL="https://{{ .Address }}:{{ .Port }}/v1/debug/topology"
          if ! timeout 5m bash -c 'until httping -sql -c 1 -G "'${URL}'"; do sleep 1; done'; then
            echo "Unreachable {{ .Name }} endpoint: ${URL}"
            exit 1
          fi
          ETH_ADDRESS="$(curl -sk ${URL} | jq -r '.topology.self["Ethereum Address"]')"
          if [ -n "${ETH_ADDRESS}" ]; then
            if [ -z "${MEV_ORACLE_OVERRIDE_WINNERS}" ]; then
              MEV_ORACLE_OVERRIDE_WINNERS="${ETH_ADDRESS}"
            else
              MEV_ORACLE_OVERRIDE_WINNERS="${MEV_ORACLE_OVERRIDE_WINNERS},${ETH_ADDRESS}"
            fi
          fi
            {{ end }}
          {{- end }}

          {{- range nomadService "mev-commit-provider-node2" }}
            {{- if contains "http" .Tags }}
          URL="https://{{ .Address }}:{{ .Port }}/v1/debug/topology"
          if ! timeout 5m bash -c 'until httping -sql -c 1 -G "'${URL}'"; do sleep 1; done'; then
            echo "Unreachable {{ .Name }} endpoint: ${URL}"
            exit 1
          fi
          ETH_ADDRESS="$(curl -sk ${URL} | jq -r '.topology.self["Ethereum Address"]')"
          if [ -n "${ETH_ADDRESS}" ]; then
            if [ -z "${MEV_ORACLE_OVERRIDE_WINNERS}" ]; then
              MEV_ORACLE_OVERRIDE_WINNERS="${ETH_ADDRESS}"
            else
              MEV_ORACLE_OVERRIDE_WINNERS="${MEV_ORACLE_OVERRIDE_WINNERS},${ETH_ADDRESS}"
            fi
          fi
            {{ end }}
          {{- end }}

          {{- range nomadService "mev-commit-provider-node3" }}
            {{- if contains "http" .Tags }}
          URL="https://{{ .Address }}:{{ .Port }}/v1/debug/topology"
          if ! timeout 5m bash -c 'until httping -sql -c 1 -G "'${URL}'"; do sleep 1; done'; then
            echo "Unreachable {{ .Name }} endpoint: ${URL}"
            exit 1
          fi
          ETH_ADDRESS="$(curl -sk ${URL} | jq -r '.topology.self["Ethereum Address"]')"
          if [ -n "${ETH_ADDRESS}" ]; then
            if [ -z "${MEV_ORACLE_OVERRIDE_WINNERS}" ]; then
              MEV_ORACLE_OVERRIDE_WINNERS="${ETH_ADDRESS}"
            else
              MEV_ORACLE_OVERRIDE_WINNERS="${MEV_ORACLE_OVERRIDE_WINNERS},${ETH_ADDRESS}"
            fi
          fi
            {{ end }}
          {{- end }}

          if [ ! -z "${MEV_ORACLE_OVERRIDE_WINNERS}" ]; then
            echo "Overriding winners: ${MEV_ORACLE_OVERRIDE_WINNERS}"
           export MEV_ORACLE_OVERRIDE_WINNERS
          fi
          {% endraw %}
          {% endif %}
          {% raw %}

          {{- range nomadService "contracts-deployer" }}
            {{ if contains "http" .Tags }}
          URL="http://{{ .Address }}:{{ .Port }}/contracts.json"
          CONTRACTS_FILE="/local/contracts.json"
          if ! timeout 5m bash -c 'until httping -sq -c 1 "'${URL}'"; do sleep 1; done'; then
            echo "Unreachable endpoint: ${URL}"
            exit 1
          fi
          curl -s -o "${CONTRACTS_FILE}" "${URL}"
          export MEV_ORACLE_PROVIDERREGISTRY_CONTRACT_ADDR="$(jq -r '.ProviderRegistry' ${CONTRACTS_FILE})"
          export MEV_ORACLE_BIDDERREGISTRY_CONTRACT_ADDR="$(jq -r '.BidderRegistry' ${CONTRACTS_FILE})"
          export MEV_ORACLE_ORACLE_CONTRACT_ADDR="$(jq -r '.Oracle' ${CONTRACTS_FILE})"
          export MEV_ORACLE_BLOCKTRACKER_CONTRACT_ADDR="$(jq -r '.BlockTracker' ${CONTRACTS_FILE})"
          export MEV_ORACLE_PRECONF_CONTRACT_ADDR="$(jq -r '.PreConfCommitmentStore' ${CONTRACTS_FILE})"
            {{ end }}
          {{- end }}

          source alloc/data/postgres.env
          export MEV_ORACLE_PG_USER="${POSTGRES_USERNAME}"
          export MEV_ORACLE_PG_PASSWORD="${POSTGRES_PASSWORD}"
          export MEV_ORACLE_PG_DBNAME="${POSTGRES_DB}"

          chmod +x local/mev-commit-oracle
          local/mev-commit-oracle start
          {% endraw %}
        EOH
        destination = "local/run.sh"
        perms = "0755"
      }

      config {
        command = "bash"
        args = ["-c", "local/run.sh"]
      }
    }
  }
}
