#jinja2: trim_blocks:True, lstrip_blocks:True
job "{{ job.name }}" {
  datacenters = ["{{ datacenter }}"]

  meta {
    POSTGRESQL_MAIN_VERSION = "15"
    DB_NAME="mev_oracle"
    DB_USER="mev_oracle"
  }

  group "{{ job.name }}-group" {
    count = {{ job.count }}

    network {
      mode = "bridge"

      dns {
        servers = {{ (ansible_facts['dns']['nameservers'] + ['1.1.1.1']) | tojson }}
      }

      {% for port_name, port_details in job.ports[0].items() %}
      port "{{ port_name }}" {
        {% if port_details.get('static') %}
        static = {{ port_details['static'] }}
        {% endif %}
        {% if port_details.get('to') %}
        to = {{ port_details['to'] }}
        {% endif %}
      }
      {% endfor %}
    }

    {% for port_name in job.ports[0] %}
    service {
      name = "{{ job.name }}"
      port = "{{ port_name }}"
      tags = ["{{ port_name }}"]
      provider = "nomad"
    }
    {% endfor %}

    task "db" {
      driver = "exec"

      lifecycle {
        hook    = "prestart"
        sidecar = true
      }

      template {
        data = <<-EOH
          {%- raw %}
          PATH="/usr/lib/postgresql/{{env "NOMAD_META_POSTGRESQL_MAIN_VERSION"}}/bin:{{env "PATH"}}"
          PG_DATA="/local/pgdata-{{env "NOMAD_ALLOC_INDEX"}}"
          {% endraw %}
        EOH
        destination = "secrets/.env"
        env = true
      }

      template {
        data = <<-EOH
          #!/usr/bin/env bash

          {% raw %}
          {{- range nomadService "datadog-agent-logs-collector" }}
            {{ if contains "tcp" .Tags }}
          exec > >(nc {{ .Address }} {{ .Port }}) 2>&1
            {{ end }}
          {{- end }}

          if [ -d "${PG_DATA}" ]; then
              "Initialized and configured database found"
              postgres -D ${PG_DATA}
              exit $?
          fi

          mkdir -p /var/run/postgresql > /dev/null 2>&1
          pg_ctl initdb --silent --pgdata=${PG_DATA}
          postgres -D ${PG_DATA} &
          pid=$!
          until pg_isready --quiet --username=$USER --dbname=postgres; do
            echo "Waiting for PostgreSQL to start..."
            sleep 1
          done

          PASSWORD="{{ with secret "secret/data/mev-commit" }}{{ .Data.data.oracle_db_password }}{{ end }}"
          createuser --username=$USER --createdb ${NOMAD_META_DB_USER}
          createdb --username=${NOMAD_META_DB_USER} ${NOMAD_META_DB_NAME}
          psql --quiet \
               --username=${NOMAD_META_DB_USERNAME} \
               --dbname=${NOMAD_META_DB_NAME} \
               --command="ALTER USER ${NOMAD_META_DB_USER} WITH PASSWORD '${PASSWORD}'; \
                          GRANT ALL PRIVILEGES ON DATABASE ${NOMAD_META_DB_NAME} TO ${NOMAD_META_DB_USER};"
          echo "Database initialized and configured successfully"

          wait $pid
          {% endraw %}

        EOH
        destination = "local/run.sh"
        perms = "0755"
      }

      config {
        command = "bash"
        args = ["-c", "local/run.sh"]
      }
    }

    task "oracle" {
      driver = "exec"

      artifact {
        source = "https://primev-infrastructure-artifacts.s3.us-west-2.amazonaws.com/mev-commit-oracle_{{ version }}_Linux_x86_64.tar.gz"
      }

      artifact {
        source = "https://primev-infrastructure-artifacts.s3.us-west-2.amazonaws.com/contracts_{{ version }}.tar.gz"
      }

      template {
        data = <<-EOH
          KEYSTOREGEN_LOG_FMT="{{ job.env.get('log-format', 'json') }}"
          KEYSTOREGEN_LOG_TAGS="{{
            job.env['log-tags'].items() | map('join', ':') | join('; ')
            if job.env['log-tags'] is defined and job.env['log-tags']
            else 'service:' + job.name + '-{{ env "NOMAD_ALLOC_INDEX" }}'
          }}"
          MEV_ORACLE_LOG_FMT="{{ job.env.get('log-format', 'json') }}"
          MEV_ORACLE_LOG_TAGS="{{
            job.env['log-tags'].items() | map('join', ':') | join('; ')
            if job.env['log-tags'] is defined and job.env['log-tags']
            else 'service:' + job.name + '-{{ env "NOMAD_ALLOC_INDEX" }}'
          }}"
          MEV_ORACLE_LOG_LEVEL="{{ job.env.get('log-level', 'info') }}"
          MEV_ORACLE_LAGGERD_MODE="{{ job.env.get('laggerd-mode', '20') }}"
          MEV_ORACLE_L1_RPC_URL="{{ job.env['l1_rpc_url'] }}"
          {%- raw %}
          MEV_ORACLE_KEYSTORE_PATH="/local/data-{{env "NOMAD_ALLOC_INDEX"}}/keystore"
          MEV_ORACLE_KEYSTORE_PASSWORD="{{ with secret "secret/data/mev-commit" }}{{ .Data.data.oracle_keystore_password }}{{ end }}"
          {{- range nomadService "mev-commit-oracle" }}
            {{- if contains "http" .Tags }}
          MEV_ORACLE_HTTP_PORT="{{ .Port }}"
            {{- end }}
          {{- end }}
          {{- range nomadService "mev-commit-geth-bootnode1" }}
            {{- if contains "http" .Tags }}
          MEV_ORACLE_SETTLEMENT_RPC_URL_HTTP="http://{{ .Address }}:{{ .Port }}"
            {{- end }}
            {{- if contains "ws" .Tags }}
          MEV_ORACLE_SETTLEMENT_RPC_URL_WS="ws://{{ .Address}}:{{ .Port }}"
            {{- end }}
          {{- end }}
          {{- range nomadService "{% endraw %}{{ job.name }}{% raw %}" }}
            {{- if contains "db" .Tags }}
          MEV_ORACLE_PG_HOST="localhost"
          MEV_ORACLE_PG_PORT="{{ .Port }}"
          MEV_ORACLE_PG_USER="{{env "NOMAD_META_DB_USER"}}"
          MEV_ORACLE_PG_PASSWORD="{{ with secret "secret/data/mev-commit" }}{{ .Data.data.oracle_db_password }}{{ end }}"
          MEV_ORACLE_PG_DBNAME="{{env "NOMAD_META_DB_NAME"}}"
            {{- end }}
          {{- end }}
          {% endraw %}
        EOH
        destination = "secrets/.env"
        env = true
      }

      template {
        data = <<-EOH
          #!/usr/bin/env bash
          {%- raw %}
          {{- range nomadService "mev-commit-provider-node1" }}
            {{ if contains "http" .Tags }}
          TOPOLOGY=$(curl https://{{ .Address}}:{{ .Port }}/v1/debug/topology)
          PROVIDER_ETHEREUM_ADDRESS=$(echo ${TOPOLOGY} | jq -r '.topology.self["Ethereum Address"]')
          export MEV_ORACLE_OVERRIDE_WINNERS=${PROVIDER_ETHEREUM_ADDRESS}
            {{ end }}
          {{- end }}
          {% endraw %}

          {%- raw %}
          {{- range nomadService "datadog-agent-logs-collector" }}
            {{ if contains "tcp" .Tags }}
          exec > >(nc {{ .Address }} {{ .Port }}) 2>&1
            {{ end }}
          {{- end }}
          {% endraw %}

          if [ ! -d "${MEV_ORACLE_KEYSTORE_PATH}" ]; then
            mkdir -p "${MEV_ORACLE_KEYSTORE_PATH}" > /dev/null 2>&1
            mv local/contracts/deployer_keystore/* "${MEV_ORACLE_KEYSTORE_PATH}/"
            rm -rf local/contracts
          fi

          chmod +x local/mev-commit-oracle
          local/mev-commit-oracle start
        EOH
        destination = "local/run.sh"
        perms = "0755"
      }

      config {
        command = "bash"
        args = ["-c", "local/run.sh"]
      }
    }
  }
}
