#jinja2: trim_blocks:True, lstrip_blocks:True
job "{{ job.name }}" {
  datacenters = ["{{ datacenter }}"]

  group "{{ job.name }}-group" {
    count = {{ job.count }}

    {% if env == 'devenv' %}
    restart {
      attempts = 0
      mode = "fail"
    }

    reschedule {
      attempts = 0
      unlimited = false
    }
    {% endif %}

    network {
      mode = "bridge"

      dns {
        servers = {{ (ansible_facts['dns']['nameservers'] + ['1.1.1.1']) | tojson }}
      }

      {% if job.ports is defined %}
        {% for port_name, port_details in job.ports[0].items() %}
      port "{{ port_name }}" {
        {% if port_details.get('static') %}
        static = {{ port_details['static'] }}
        {% endif %}
        {% if port_details.get('to') %}
        to = {{ port_details['to'] }}
        {% endif %}
      }
        {% endfor %}
      {% endif %}
    }

    task "otel-collector" {
      driver = "exec"

      {% if job.ports is defined %}
        {% for port_name in job.ports[0] %}
      service {
        name = "{{ job.name }}"
        port = "{{ port_name }}"
        tags = ["{{ port_name }}"]
        provider = "nomad"
        {% if port_name == "health" %}
        check {
          type = "http"
          path = "/health"
          interval = "10s"
          timeout = "2s"
        }
        {% endif %}
      }
        {% endfor %}
      {% endif %}

      artifact {
        source = "https://github.com/open-telemetry/opentelemetry-collector-releases/releases/download/v0.107.0/otelcol-contrib_0.107.0_linux_{{ 'amd64' if target_system_architecture == 'x86_64' else 'arm64' }}.tar.gz"
      }

      template {
        data = <<-EOH
          receivers:
            otlp:
              protocols:
                http:
                  endpoint: 0.0.0.0:4318
                grpc:
                  endpoint: 0.0.0.0:4317

          processors:
            batch:
              send_batch_max_size: 100
              send_batch_size: 10
              timeout: 10s
            attributes:
              actions:
                - key: deployment.environment
                  value: "{{ env }}"
                  action: upsert
                - key: service.version
                  value: "{{ version }}"
                  action: upsert

          connectors:
            datadog/connector:

          exporters:
            datadog/exporter:
              api:
                site: datadoghq.com
                key: {{ datadog_key }}
              traces:
                trace_buffer: 500

          extensions:
            health_check:
              endpoint: "0.0.0.0:80"
              path: "/health"
              check_collector_pipeline:
                enabled: true

          service:
            pipelines:
              traces:
                receivers: [otlp]
                processors: [batch]
                exporters: [datadog/connector, datadog/exporter]
              metrics:
                receivers: [datadog/connector, otlp]
                processors: [batch]
                exporters: [datadog/exporter]
            extensions: [health_check]

        EOH
        destination = "local/collector.yaml"
      }

      template {
        data = <<-EOH
          #!/usr/bin/env bash

          mv local/otelcol-contrib local/otel-collector
          chmod +x local/otel-collector
          local/otel-collector --config local/collector.yaml
        EOH
        destination = "local/run.sh"
        perms = "0755"
      }

      config {
        command = "bash"
        args = ["-c", "local/run.sh"]
      }
    }
  }
}
