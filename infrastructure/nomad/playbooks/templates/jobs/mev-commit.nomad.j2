#jinja2: trim_blocks:True, lstrip_blocks:True
job "{{ job.name }}" {
  datacenters = ["{{ datacenter }}"]

  group "{{ job.name }}-group" {
    count = {{ job.count }}

    network {
      mode = "bridge"

      dns {
        servers = {{ (ansible_facts['dns']['nameservers'] + ['1.1.1.1']) | tojson }}
      }

      {% for port_name, port_details in job.ports[0].items() %}
      port "{{ port_name }}" {
        {% if port_details.get('static') %}
        static = {{ port_details['static'] }}
        {% endif %}
        {% if port_details.get('to') %}
        to = {{ port_details['to'] }}
        {% endif %}
      }
      {% endfor %}
    }

    {% for port_name in job.ports[0] %}
    service {
      name = "{{ job.name }}"
      port = "{{ port_name }}"
      tags = ["{{ port_name }}"]
      provider = "nomad"
    }
    {% endfor %}

    task "node" {
      driver = "exec"

      artifact {
        source = "https://primev-infrastructure-artifacts.s3.us-west-2.amazonaws.com/mev-commit_{{ version }}_Linux_x86_64.tar.gz"
      }

      artifact {
        source = "https://primev-infrastructure-artifacts.s3.us-west-2.amazonaws.com/keystore-generator_{{ version }}_Linux_x86_64.tar.gz"
      }

      template {
        data = <<-EOH
          KEYSTOREGEN_LOG_FMT="{{ job.env.get('log-format', 'json') }}"
          KEYSTOREGEN_LOG_TAGS="{{
            job.env['log-tags'].items() | map('join', ':') | join('; ')
            if job.env['log-tags'] is defined and job.env['log-tags']
            else 'service:' + job.name + '-{{ env "NOMAD_ALLOC_INDEX" }}'
          }}"
          MEV_COMMIT_LOG_FMT="{{ job.env.get('log-format', 'json') }}"
          MEV_COMMIT_LOG_TAGS="{{
            job.env['log-tags'].items() | map('join', ':') | join('; ')
            if job.env['log-tags'] is defined and job.env['log-tags']
            else 'service:' + job.name + '-{{ env "NOMAD_ALLOC_INDEX" }}'
          }}"
          {%- raw %}
          MEV_COMMIT_KEYSTORE_PATH="/local/data-{{env "NOMAD_ALLOC_INDEX"}}/keystore"
          MEV_COMMIT_KEYSTORE_PASSWORD="{{ with secret "secret/data/mev-commit" }}{{ .Data.data.{% endraw %}{{ job.secrets['keystore'] }}{% raw %}_keystore_password }}{{ end }}"
          {{- range nomadService "mev-commit-geth-bootnode1" }}
            {{- if contains "http" .Tags }}
          MEV_COMMIT_SETTLEMENT_RPC_ENDPOINT="http://{{ .Address }}:{{ .Port }}"
            {{- end }}
            {{- if contains "ws" .Tags }}
          MEV_COMMIT_SETTLEMENT_WS_RPC_ENDPOINT="ws://{{ .Address}}:{{ .Port }}"
            {{- end }}  
          {{- end }}
          {% endraw %}
          MEV_COMMIT_PEER_TYPE="{{ job.env['type'] }}"
          MEV_COMMIT_HTTP_ADDR="{{ job.env.get('http-address', '0.0.0.0') }}"
          MEV_COMMIT_RPC_ADDR="{{ job.env.get('rpc-address', '0.0.0.0') }}"
          MEV_COMMIT_P2P_ADDR="{{ job.env.get('p2p-address', '0.0.0.0') }}"
          MEV_COMMIT_SERVER_TLS_CERTIFICATE="{{ job.env['tls_crt_file'] }}"
          MEV_COMMIT_SERVER_TLS_PRIVATE_KEY="{{ job.env['tls_key_file'] }}"
          {% if job.env['type'] == 'provider' %}
          MEV_COMMIT_NAT_ADDR="{{ job.env['nat_address'] }}"
          {%- raw %}
          {{- range nomadService "{% endraw %}{{ job.name }}{% raw %}" }}
            {{- if contains "p2p" .Tags }}
          MEV_COMMIT_NAT_PORT="{{ .Port }}"
            {{- end }}
          {{- end }}
          {% endraw %}
          {% endif %}
        EOH
        destination = "secrets/.env"
        env = true
      }

      template {
        data = <<-EOH
          #!/usr/bin/env bash

          {% raw %}
          {{- range nomadService "datadog-agent-logs-collector" }}
            {{ if contains "tcp" .Tags }}
          exec > >(nc {{ .Address }} {{ .Port }}) 2>&1
            {{ end }}
          {{- end }}
          {% endraw %}

          {% if job.env['type'] != 'bootnode' %}
          {%- raw %}
          {{- range nomadService "mev-commit-bootnode1" }}
            {{- if contains "http" .Tags }}

          # Fetch topology data
          TOPOLOGY=$(curl https://{{ .Address }}:{{ .Port }}/v1/debug/topology)

          # Extract peerId (assuming the response format is JSON and jq is available)
          PEER_ID=$(echo $TOPOLOGY | jq -r '.topology.self.Underlay')

            {{- else if contains "p2p" .Tags }}

          # Set the MEV_COMMIT_BOOTNODES environment variable
          export MEV_COMMIT_BOOTNODES="/ip4/{{ .Address }}/tcp/{{ .Port }}/p2p/${PEER_ID}"

            {{- end }}
          {{- end }}
          {% endraw %}
          {% endif %}

          if [ ! -d "${MEV_COMMIT_KEYSTORE_PATH}" ]; then
            mkdir -p "${MEV_COMMIT_KEYSTORE_PATH}" > /dev/null 2>&1
            chmod +x local/keystore-generator
            local/keystore-generator generate \
              --keystore-dir "${MEV_COMMIT_KEYSTORE_PATH}" \
              --passphrase "${MEV_COMMIT_KEYSTORE_PASSWORD}"
          fi

          chmod +x local/mev-commit
          local/mev-commit
        EOH
        destination = "local/run.sh"
        perms = "0755"
      }

      config {
        command = "bash"
        args = ["-c", "local/run.sh"]
      }
    }
  }
}
