// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/primev/mev-commit/cl/redisapp (interfaces: StateManager)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	types "github.com/primev/mev-commit/cl/redisapp/types"
	redis "github.com/redis/go-redis/v9"
)

// MockStateManager is a mock of StateManager interface.
type MockStateManager struct {
	ctrl     *gomock.Controller
	recorder *MockStateManagerMockRecorder
}

// MockStateManagerMockRecorder is the mock recorder for MockStateManager.
type MockStateManagerMockRecorder struct {
	mock *MockStateManager
}

// NewMockStateManager creates a new mock instance.
func NewMockStateManager(ctrl *gomock.Controller) *MockStateManager {
	mock := &MockStateManager{ctrl: ctrl}
	mock.recorder = &MockStateManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStateManager) EXPECT() *MockStateManagerMockRecorder {
	return m.recorder
}

// AckMessage mocks base method.
func (m *MockStateManager) AckMessage(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AckMessage", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AckMessage indicates an expected call of AckMessage.
func (mr *MockStateManagerMockRecorder) AckMessage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AckMessage", reflect.TypeOf((*MockStateManager)(nil).AckMessage), arg0, arg1)
}

// CreateConsumerGroup mocks base method.
func (m *MockStateManager) CreateConsumerGroup(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateConsumerGroup", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateConsumerGroup indicates an expected call of CreateConsumerGroup.
func (mr *MockStateManagerMockRecorder) CreateConsumerGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateConsumerGroup", reflect.TypeOf((*MockStateManager)(nil).CreateConsumerGroup), arg0)
}

// GetBlockBuildState mocks base method.
func (m *MockStateManager) GetBlockBuildState(arg0 context.Context) types.BlockBuildState {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockBuildState", arg0)
	ret0, _ := ret[0].(types.BlockBuildState)
	return ret0
}

// GetBlockBuildState indicates an expected call of GetBlockBuildState.
func (mr *MockStateManagerMockRecorder) GetBlockBuildState(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockBuildState", reflect.TypeOf((*MockStateManager)(nil).GetBlockBuildState), arg0)
}

// LoadExecutionHead mocks base method.
func (m *MockStateManager) LoadExecutionHead(arg0 context.Context) (*types.ExecutionHead, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadExecutionHead", arg0)
	ret0, _ := ret[0].(*types.ExecutionHead)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadExecutionHead indicates an expected call of LoadExecutionHead.
func (mr *MockStateManagerMockRecorder) LoadExecutionHead(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadExecutionHead", reflect.TypeOf((*MockStateManager)(nil).LoadExecutionHead), arg0)
}

// LoadOrInitializeBlockState mocks base method.
func (m *MockStateManager) LoadOrInitializeBlockState(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadOrInitializeBlockState", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// LoadOrInitializeBlockState indicates an expected call of LoadOrInitializeBlockState.
func (mr *MockStateManagerMockRecorder) LoadOrInitializeBlockState(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadOrInitializeBlockState", reflect.TypeOf((*MockStateManager)(nil).LoadOrInitializeBlockState), arg0)
}

// ReadMessagesFromStream mocks base method.
func (m *MockStateManager) ReadMessagesFromStream(arg0 context.Context, arg1 types.RedisMsgType) ([]redis.XStream, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadMessagesFromStream", arg0, arg1)
	ret0, _ := ret[0].([]redis.XStream)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadMessagesFromStream indicates an expected call of ReadMessagesFromStream.
func (mr *MockStateManagerMockRecorder) ReadMessagesFromStream(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadMessagesFromStream", reflect.TypeOf((*MockStateManager)(nil).ReadMessagesFromStream), arg0, arg1)
}

// RecoverLeaderState mocks base method.
func (m *MockStateManager) RecoverLeaderState() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecoverLeaderState")
	ret0, _ := ret[0].(error)
	return ret0
}

// RecoverLeaderState indicates an expected call of RecoverLeaderState.
func (mr *MockStateManagerMockRecorder) RecoverLeaderState() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecoverLeaderState", reflect.TypeOf((*MockStateManager)(nil).RecoverLeaderState))
}

// ResetBlockState mocks base method.
func (m *MockStateManager) ResetBlockState(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetBlockState", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ResetBlockState indicates an expected call of ResetBlockState.
func (mr *MockStateManagerMockRecorder) ResetBlockState(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetBlockState", reflect.TypeOf((*MockStateManager)(nil).ResetBlockState), arg0)
}

// SaveBlockState mocks base method.
func (m *MockStateManager) SaveBlockState(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveBlockState", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveBlockState indicates an expected call of SaveBlockState.
func (mr *MockStateManagerMockRecorder) SaveBlockState(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveBlockState", reflect.TypeOf((*MockStateManager)(nil).SaveBlockState), arg0)
}

// SaveBlockStateAndPublishToStream mocks base method.
func (m *MockStateManager) SaveBlockStateAndPublishToStream(arg0 context.Context, arg1 *types.BlockBuildState) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveBlockStateAndPublishToStream", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveBlockStateAndPublishToStream indicates an expected call of SaveBlockStateAndPublishToStream.
func (mr *MockStateManagerMockRecorder) SaveBlockStateAndPublishToStream(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveBlockStateAndPublishToStream", reflect.TypeOf((*MockStateManager)(nil).SaveBlockStateAndPublishToStream), arg0, arg1)
}

// SaveExecutionHead mocks base method.
func (m *MockStateManager) SaveExecutionHead(arg0 context.Context, arg1 *types.ExecutionHead) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveExecutionHead", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveExecutionHead indicates an expected call of SaveExecutionHead.
func (mr *MockStateManagerMockRecorder) SaveExecutionHead(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveExecutionHead", reflect.TypeOf((*MockStateManager)(nil).SaveExecutionHead), arg0, arg1)
}

// SaveExecutionHeadAndAck mocks base method.
func (m *MockStateManager) SaveExecutionHeadAndAck(arg0 context.Context, arg1 *types.ExecutionHead, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveExecutionHeadAndAck", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveExecutionHeadAndAck indicates an expected call of SaveExecutionHeadAndAck.
func (mr *MockStateManagerMockRecorder) SaveExecutionHeadAndAck(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveExecutionHeadAndAck", reflect.TypeOf((*MockStateManager)(nil).SaveExecutionHeadAndAck), arg0, arg1, arg2)
}

// Stop mocks base method.
func (m *MockStateManager) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop.
func (mr *MockStateManagerMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockStateManager)(nil).Stop))
}
