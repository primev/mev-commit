// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.1
// source: relayer.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Relayer_Subscribe_FullMethodName = "/pb.Relayer/Subscribe"
)

// RelayerClient is the client API for Relayer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RelayerClient interface {
	Subscribe(ctx context.Context, opts ...grpc.CallOption) (Relayer_SubscribeClient, error)
}

type relayerClient struct {
	cc grpc.ClientConnInterface
}

func NewRelayerClient(cc grpc.ClientConnInterface) RelayerClient {
	return &relayerClient{cc}
}

func (c *relayerClient) Subscribe(ctx context.Context, opts ...grpc.CallOption) (Relayer_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &Relayer_ServiceDesc.Streams[0], Relayer_Subscribe_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &relayerSubscribeClient{stream}
	return x, nil
}

type Relayer_SubscribeClient interface {
	Send(*ClientMessage) error
	Recv() (*PayloadMessage, error)
	grpc.ClientStream
}

type relayerSubscribeClient struct {
	grpc.ClientStream
}

func (x *relayerSubscribeClient) Send(m *ClientMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *relayerSubscribeClient) Recv() (*PayloadMessage, error) {
	m := new(PayloadMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RelayerServer is the server API for Relayer service.
// All implementations must embed UnimplementedRelayerServer
// for forward compatibility
type RelayerServer interface {
	Subscribe(Relayer_SubscribeServer) error
	mustEmbedUnimplementedRelayerServer()
}

// UnimplementedRelayerServer must be embedded to have forward compatible implementations.
type UnimplementedRelayerServer struct {
}

func (UnimplementedRelayerServer) Subscribe(Relayer_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedRelayerServer) mustEmbedUnimplementedRelayerServer() {}

// UnsafeRelayerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RelayerServer will
// result in compilation errors.
type UnsafeRelayerServer interface {
	mustEmbedUnimplementedRelayerServer()
}

func RegisterRelayerServer(s grpc.ServiceRegistrar, srv RelayerServer) {
	s.RegisterService(&Relayer_ServiceDesc, srv)
}

func _Relayer_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RelayerServer).Subscribe(&relayerSubscribeServer{stream})
}

type Relayer_SubscribeServer interface {
	Send(*PayloadMessage) error
	Recv() (*ClientMessage, error)
	grpc.ServerStream
}

type relayerSubscribeServer struct {
	grpc.ServerStream
}

func (x *relayerSubscribeServer) Send(m *PayloadMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *relayerSubscribeServer) Recv() (*ClientMessage, error) {
	m := new(ClientMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Relayer_ServiceDesc is the grpc.ServiceDesc for Relayer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Relayer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Relayer",
	HandlerType: (*RelayerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subscribe",
			Handler:       _Relayer_Subscribe_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "relayer.proto",
}
